diff --git a/Makefile b/Makefile
index 9c5ad77..7e0f593 100644
--- a/Makefile
+++ b/Makefile
@@ -1,333 +1,922 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#   http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-NEED_LIBPROTOC=1
-include config.mk
-
-# Notes on the flags:
-# 1. Added -fno-omit-frame-pointer: perf/tcmalloc-profiler use frame pointers by default
-# 2. Added -D__const__= : Avoid over-optimizations of TLS variables by GCC>=4.8
-# 3. Removed -Werror: Not block compilation for non-vital warnings, especially when the
-#    code is tested on newer systems. If the code is used in production, add -Werror back
-CPPFLAGS+=-DBTHREAD_USE_FAST_PTHREAD_MUTEX -D__const__= -D_GNU_SOURCE -DUSE_SYMBOLIZE -DNO_TCMALLOC -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -DNDEBUG -DBRPC_REVISION=\"$(shell ./tools/get_brpc_revision.sh .)\"
-CXXFLAGS=$(CPPFLAGS) -O2 -pipe -Wall -W -fPIC -fstrict-aliasing -Wno-invalid-offsetof -Wno-unused-parameter -fno-omit-frame-pointer -std=c++0x
-CFLAGS=$(CPPFLAGS) -O2 -pipe -Wall -W -fPIC -fstrict-aliasing -Wno-unused-parameter -fno-omit-frame-pointer
-DEBUG_CXXFLAGS = $(filter-out -DNDEBUG,$(CXXFLAGS)) -DUNIT_TEST -DBVAR_NOT_LINK_DEFAULT_VARIABLES
-DEBUG_CFLAGS = $(filter-out -DNDEBUG,$(CFLAGS)) -DUNIT_TEST
-HDRPATHS=-I./src $(addprefix -I, $(HDRS))
-LIBPATHS = $(addprefix -L, $(LIBS))
-COMMA = ,
-SOPATHS = $(addprefix -Wl$(COMMA)-rpath$(COMMA), $(LIBS))
-SRCEXTS = .c .cc .cpp .proto
-
-SOEXT = so
-ifeq ($(SYSTEM),Darwin)
-    SOEXT = dylib
-endif
-
-#required by butil/crc32.cc to boost performance for 10x
-ifeq ($(shell test $(GCC_VERSION) -ge 40400; echo $$?),0)
-	CXXFLAGS+=-msse4 -msse4.2
-endif
-#not solved yet
-ifeq ($(CC),gcc)
- ifeq ($(shell test $(GCC_VERSION) -ge 70000; echo $$?),0)
-	CXXFLAGS+=-Wno-aligned-new
- endif
-endif
-
-BUTIL_SOURCES = \
-    src/butil/third_party/dmg_fp/g_fmt.cc \
-    src/butil/third_party/dmg_fp/dtoa_wrapper.cc \
-    src/butil/third_party/dynamic_annotations/dynamic_annotations.c \
-    src/butil/third_party/icu/icu_utf.cc \
-    src/butil/third_party/superfasthash/superfasthash.c \
-    src/butil/third_party/modp_b64/modp_b64.cc \
-    src/butil/third_party/symbolize/demangle.cc \
-    src/butil/third_party/symbolize/symbolize.cc \
-    src/butil/third_party/snappy/snappy-sinksource.cc \
-    src/butil/third_party/snappy/snappy-stubs-internal.cc \
-    src/butil/third_party/snappy/snappy.cc \
-    src/butil/third_party/murmurhash3/murmurhash3.cpp \
-    src/butil/arena.cpp \
-    src/butil/at_exit.cc \
-    src/butil/atomicops_internals_x86_gcc.cc \
-    src/butil/base64.cc \
-    src/butil/big_endian.cc \
-    src/butil/cpu.cc \
-    src/butil/debug/alias.cc \
-    src/butil/debug/asan_invalid_access.cc \
-    src/butil/debug/crash_logging.cc \
-    src/butil/debug/debugger.cc \
-    src/butil/debug/debugger_posix.cc \
-    src/butil/debug/dump_without_crashing.cc \
-    src/butil/debug/proc_maps_linux.cc \
-    src/butil/debug/stack_trace.cc \
-    src/butil/debug/stack_trace_posix.cc \
-    src/butil/environment.cc \
-    src/butil/files/file.cc \
-    src/butil/files/file_posix.cc \
-    src/butil/files/file_enumerator.cc \
-    src/butil/files/file_enumerator_posix.cc \
-    src/butil/files/file_path.cc \
-    src/butil/files/file_path_constants.cc \
-    src/butil/files/memory_mapped_file.cc \
-    src/butil/files/memory_mapped_file_posix.cc \
-    src/butil/files/scoped_file.cc \
-    src/butil/files/scoped_temp_dir.cc \
-    src/butil/file_util.cc \
-    src/butil/file_util_posix.cc \
-    src/butil/guid.cc \
-    src/butil/guid_posix.cc \
-    src/butil/hash.cc \
-    src/butil/lazy_instance.cc \
-    src/butil/location.cc \
-    src/butil/memory/aligned_memory.cc \
-    src/butil/memory/ref_counted.cc \
-    src/butil/memory/ref_counted_memory.cc \
-    src/butil/memory/singleton.cc \
-    src/butil/memory/weak_ptr.cc \
-    src/butil/posix/file_descriptor_shuffle.cc \
-    src/butil/posix/global_descriptors.cc \
-    src/butil/process_util.cc \
-    src/butil/rand_util.cc \
-    src/butil/rand_util_posix.cc \
-    src/butil/fast_rand.cpp \
-    src/butil/safe_strerror_posix.cc \
-    src/butil/sha1_portable.cc \
-    src/butil/strings/latin1_string_conversions.cc \
-    src/butil/strings/nullable_string16.cc \
-    src/butil/strings/safe_sprintf.cc \
-    src/butil/strings/string16.cc \
-    src/butil/strings/string_number_conversions.cc \
-    src/butil/strings/string_split.cc \
-    src/butil/strings/string_piece.cc \
-    src/butil/strings/string_util.cc \
-    src/butil/strings/string_util_constants.cc \
-    src/butil/strings/stringprintf.cc \
-    src/butil/strings/utf_offset_string_conversions.cc \
-    src/butil/strings/utf_string_conversion_utils.cc \
-    src/butil/strings/utf_string_conversions.cc \
-    src/butil/synchronization/cancellation_flag.cc \
-    src/butil/synchronization/condition_variable_posix.cc \
-    src/butil/synchronization/waitable_event_posix.cc \
-    src/butil/threading/non_thread_safe_impl.cc \
-    src/butil/threading/platform_thread_posix.cc \
-    src/butil/threading/simple_thread.cc \
-    src/butil/threading/thread_checker_impl.cc \
-    src/butil/threading/thread_collision_warner.cc \
-    src/butil/threading/thread_id_name_manager.cc \
-    src/butil/threading/thread_local_posix.cc \
-    src/butil/threading/thread_local_storage.cc \
-    src/butil/threading/thread_local_storage_posix.cc \
-    src/butil/threading/thread_restrictions.cc \
-    src/butil/threading/watchdog.cc \
-    src/butil/time/clock.cc \
-    src/butil/time/default_clock.cc \
-    src/butil/time/default_tick_clock.cc \
-    src/butil/time/tick_clock.cc \
-    src/butil/time/time.cc \
-    src/butil/time/time_posix.cc \
-    src/butil/version.cc \
-    src/butil/logging.cc \
-    src/butil/class_name.cpp \
-    src/butil/errno.cpp \
-    src/butil/find_cstr.cpp \
-    src/butil/status.cpp \
-    src/butil/string_printf.cpp \
-    src/butil/thread_local.cpp \
-    src/butil/unix_socket.cpp \
-    src/butil/endpoint.cpp \
-    src/butil/fd_utility.cpp \
-    src/butil/files/temp_file.cpp \
-    src/butil/files/file_watcher.cpp \
-    src/butil/time.cpp \
-    src/butil/zero_copy_stream_as_streambuf.cpp \
-    src/butil/crc32c.cc \
-    src/butil/containers/case_ignored_flat_map.cpp \
-    src/butil/iobuf.cpp \
-    src/butil/binary_printer.cpp \
-    src/butil/recordio.cc \
-    src/butil/popen.cpp
-
-ifeq ($(SYSTEM), Linux)
-    BUTIL_SOURCES += src/butil/file_util_linux.cc \
-        src/butil/threading/platform_thread_linux.cc \
-        src/butil/strings/sys_string_conversions_posix.cc
-endif
-ifeq ($(SYSTEM), Darwin)
-    BUTIL_SOURCES += src/butil/mac/bundle_locations.mm \
-		src/butil/mac/foundation_util.mm \
-		src/butil/file_util_mac.mm \
-		src/butil/threading/platform_thread_mac.mm \
-		src/butil/strings/sys_string_conversions_mac.mm \
-		src/butil/time/time_mac.cc \
-		src/butil/mac/scoped_mach_port.cc
-endif
-
-BUTIL_OBJS = $(addsuffix .o, $(basename $(BUTIL_SOURCES)))
-
-BVAR_DIRS = src/bvar src/bvar/detail
-BVAR_SOURCES = $(foreach d,$(BVAR_DIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))
-BVAR_OBJS = $(addsuffix .o, $(basename $(BVAR_SOURCES))) 
-
-BTHREAD_DIRS = src/bthread
-BTHREAD_SOURCES = $(foreach d,$(BTHREAD_DIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))
-BTHREAD_OBJS = $(addsuffix .o, $(basename $(BTHREAD_SOURCES))) 
-
-JSON2PB_DIRS = src/json2pb
-JSON2PB_SOURCES = $(foreach d,$(JSON2PB_DIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))
-JSON2PB_OBJS = $(addsuffix .o, $(basename $(JSON2PB_SOURCES))) 
-
-BRPC_DIRS = src/brpc src/brpc/details src/brpc/builtin src/brpc/policy
-THRIFT_SOURCES = $(foreach d,$(BRPC_DIRS),$(wildcard $(addprefix $(d)/thrift*,$(SRCEXTS))))
-BRPC_SOURCES_ALL = $(foreach d,$(BRPC_DIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))
-BRPC_SOURCES = $(filter-out $(THRIFT_SOURCES), $(BRPC_SOURCES_ALL))
-BRPC_PROTOS = $(filter %.proto,$(BRPC_SOURCES))
-BRPC_CFAMILIES = $(filter-out %.proto %.pb.cc,$(BRPC_SOURCES))
-BRPC_OBJS = $(BRPC_PROTOS:.proto=.pb.o) $(addsuffix .o, $(basename $(BRPC_CFAMILIES)))
-
-MCPACK2PB_SOURCES = \
-	src/mcpack2pb/field_type.cpp \
-	src/mcpack2pb/mcpack2pb.cpp \
-	src/mcpack2pb/parser.cpp \
-	src/mcpack2pb/serializer.cpp
-MCPACK2PB_OBJS = src/idl_options.pb.o $(addsuffix .o, $(basename $(MCPACK2PB_SOURCES)))
-
-ifeq (ENABLE_THRIFT_FRAMED_PROTOCOL, $(findstring ENABLE_THRIFT_FRAMED_PROTOCOL, $(CPPFLAGS)))
-    THRIFT_OBJS = $(addsuffix .o, $(basename $(THRIFT_SOURCES)))
-endif
-
-OBJS=$(BUTIL_OBJS) $(BVAR_OBJS) $(BTHREAD_OBJS) $(JSON2PB_OBJS) $(MCPACK2PB_OBJS) $(BRPC_OBJS) $(THRIFT_OBJS)
-
-BVAR_DEBUG_OBJS=$(BUTIL_OBJS:.o=.dbg.o) $(BVAR_OBJS:.o=.dbg.o)
-DEBUG_OBJS = $(OBJS:.o=.dbg.o)
-
-PROTOS=$(BRPC_PROTOS) src/idl_options.proto
-
-.PHONY:all
-all:  protoc-gen-mcpack libbrpc.a libbrpc.$(SOEXT) output/include output/lib output/bin
-
-.PHONY:debug
-debug: test/libbrpc.dbg.$(SOEXT) test/libbvar.dbg.a
-
-.PHONY:clean
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.17
+
+# Default target executed when no arguments are given to make.
+default_target: all
+
+.PHONY : default_target
+
+# Allow only one "make -f Makefile2" at a time, but pass parallelism.
+.NOTPARALLEL:
+
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Disable VCS-based implicit rules.
+% : %,v
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%,v
+
+
+# Disable VCS-based implicit rules.
+% : SCCS/s.%
+
+
+# Disable VCS-based implicit rules.
+% : s.%
+
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Command-line flag to silence nested $(MAKE).
+$(VERBOSE)MAKESILENT = -s
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /usr/bin/cmake3
+
+# The command to remove a file.
+RM = /usr/bin/cmake3 -E rm -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /home/fanyu/Downloads/incubator-brpc
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /home/fanyu/Downloads/incubator-brpc
+
+#=============================================================================
+# Targets provided globally by CMake.
+
+# Special rule for the target install
+install: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install
+
+# Special rule for the target install
+install/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install/fast
+
+# Special rule for the target list_install_components
+list_install_components:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Available install components are: \"Unspecified\""
+.PHONY : list_install_components
+
+# Special rule for the target list_install_components
+list_install_components/fast: list_install_components
+
+.PHONY : list_install_components/fast
+
+# Special rule for the target rebuild_cache
+rebuild_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
+	/usr/bin/cmake3 --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : rebuild_cache
+
+# Special rule for the target rebuild_cache
+rebuild_cache/fast: rebuild_cache
+
+.PHONY : rebuild_cache/fast
+
+# Special rule for the target edit_cache
+edit_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake cache editor..."
+	/usr/bin/ccmake3 -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : edit_cache
+
+# Special rule for the target edit_cache
+edit_cache/fast: edit_cache
+
+.PHONY : edit_cache/fast
+
+# Special rule for the target package_source
+package_source:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool for source..."
+	/usr/bin/cpack3 --config ./CPackSourceConfig.cmake /home/fanyu/Downloads/incubator-brpc/CPackSourceConfig.cmake
+.PHONY : package_source
+
+# Special rule for the target package_source
+package_source/fast: package_source
+
+.PHONY : package_source/fast
+
+# Special rule for the target package
+package: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool..."
+	/usr/bin/cpack3 --config ./CPackConfig.cmake
+.PHONY : package
+
+# Special rule for the target package
+package/fast: package
+
+.PHONY : package/fast
+
+# Special rule for the target install/strip
+install/strip: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip
+
+# Special rule for the target install/strip
+install/strip/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip/fast
+
+# Special rule for the target install/local
+install/local: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local
+
+# Special rule for the target install/local
+install/local/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local/fast
+
+# The main all target
+all: cmake_check_build_system
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles /home/fanyu/Downloads/incubator-brpc/CMakeFiles/progress.marks
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 all
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles 0
+.PHONY : all
+
+# The main clean target
 clean:
-	@echo "Cleaning"
-	@rm -rf src/mcpack2pb/generator.o protoc-gen-mcpack libbrpc.a libbrpc.$(SOEXT) $(OBJS) output/include output/lib output/bin $(PROTOS:.proto=.pb.h) $(PROTOS:.proto=.pb.cc)
-
-.PHONY:clean_debug
-clean_debug:
-	@rm -rf test/libbrpc.dbg.$(SOEXT) test/libbvar.dbg.a $(DEBUG_OBJS)
-
-.PRECIOUS: %.o
-
-protoc-gen-mcpack: src/idl_options.pb.cc src/mcpack2pb/generator.o libbrpc.a
-	@echo "Linking $@"
-ifeq ($(SYSTEM),Linux)
-	@$(CXX) -o $@ $(HDRPATHS) $(LIBPATHS) -std=c++0x -Xlinker "-(" $^ -Wl,-Bstatic $(STATIC_LINKINGS) -Wl,-Bdynamic -Xlinker "-)" $(DYNAMIC_LINKINGS)
-else ifeq ($(SYSTEM),Darwin)
-	@$(CXX) -o $@ $(HDRPATHS) $(LIBPATHS) -std=c++0x $^ $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS)
-endif
-
-# force generation of pb headers before compiling to avoid fail-to-import issues in compiling pb.cc
-libbrpc.a:$(BRPC_PROTOS:.proto=.pb.h) $(OBJS)
-	@echo "Packing $@"
-	@ar crs $@ $(filter %.o,$^)
-
-libbrpc.$(SOEXT):$(BRPC_PROTOS:.proto=.pb.h) $(OBJS)
-	@echo "Linking $@"
-ifeq ($(SYSTEM),Linux)
-	@$(CXX) -shared -o $@ $(LIBPATHS) $(SOPATHS) -Xlinker "-(" $(filter %.o,$^) -Xlinker "-)" $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS)
-else ifeq ($(SYSTEM),Darwin)
-	@$(CXX) -dynamiclib -Wl,-headerpad_max_install_names -o $@ -install_name @rpath/$@ $(LIBPATHS) $(SOPATHS) $(filter %.o,$^) $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS)
-endif
-
-test/libbvar.dbg.a:$(BVAR_DEBUG_OBJS)
-	@echo "Packing $@"
-	@ar crs $@ $^
-
-test/libbrpc.dbg.$(SOEXT):$(BRPC_PROTOS:.proto=.pb.h) $(DEBUG_OBJS)
-	@echo "Linking $@"
-ifeq ($(SYSTEM),Linux)
-	@$(CXX) -shared -o $@ $(LIBPATHS) $(SOPATHS) -Xlinker "-(" $(filter %.o,$^) -Xlinker "-)" $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS)
-else ifeq ($(SYSTEM),Darwin)
-	@$(CXX) -dynamiclib -Wl,-headerpad_max_install_names -o $@ -install_name @rpath/libbrpc.dbg.$(SOEXT) $(LIBPATHS) $(SOPATHS) $(filter %.o,$^) $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS)
-endif
-
-.PHONY:output/include
-output/include:
-	@echo "Copying to $@"
-	@for dir in `find src -type f -name "*.h" -exec dirname {} \\; | sed -e 's/^src\///g' -e '/^src$$/d' | sort | uniq`; do mkdir -p $@/$$dir && cp src/$$dir/*.h $@/$$dir/; done
-	@for dir in `find src -type f -name "*.hpp" -exec dirname {} \\; | sed -e 's/^src\///g' -e '/^src$$/d' | sort | uniq`; do mkdir -p $@/$$dir && cp src/$$dir/*.hpp $@/$$dir/; done
-	@cp src/idl_options.proto src/idl_options.pb.h $@
-
-.PHONY:output/lib
-output/lib:libbrpc.a libbrpc.$(SOEXT)
-	@echo "Copying to $@"
-	@mkdir -p $@
-	@cp $^ $@
-
-.PHONY:output/bin
-output/bin:protoc-gen-mcpack
-	@echo "Copying to $@"
-	@mkdir -p $@
-	@cp $^ $@
-
-%.pb.cc %.pb.h:%.proto
-	@echo "Generating $@"
-	@$(PROTOC) --cpp_out=./src --proto_path=./src --proto_path=$(PROTOBUF_HDR) $<
-
-%.o:%.cpp
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
-
-%http2_rpc_protocol.dbg.o:%http2_rpc_protocol.cpp
-	@echo "Compiling $@ with O2"
-	@$(CXX) -c $(HDRPATHS) -O2 $(DEBUG_CXXFLAGS) $< -o $@
-
-%hpack.dbg.o:%hpack.cpp
-	@echo "Compiling $@ with O2"
-	@$(CXX) -c $(HDRPATHS) -O2 $(DEBUG_CXXFLAGS) $< -o $@
-
-%.dbg.o:%.cpp
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(DEBUG_CXXFLAGS) $< -o $@
-
-%.o:%.cc
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
-
-%.dbg.o:%.cc
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(DEBUG_CXXFLAGS) $< -o $@
-
-%.o:%.mm
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
-
-%.dbg.o:%.mm
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(DEBUG_CXXFLAGS) $< -o $@
-
-%.o:%.c
-	@echo "Compiling $@"
-	@$(CC) -c $(HDRPATHS) $(CFLAGS) $< -o $@
-
-%.dbg.o:%.c
-	@echo "Compiling $@"
-	@$(CC) -c $(HDRPATHS) $(DEBUG_CFLAGS) $< -o $@
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 clean
+.PHONY : clean
+
+# The main clean target
+clean/fast: clean
+
+.PHONY : clean/fast
+
+# Prepare targets for installation.
+preinstall: all
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall
+.PHONY : preinstall
+
+# Prepare targets for installation.
+preinstall/fast:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall
+.PHONY : preinstall/fast
+
+# clear depends
+depend:
+	$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
+.PHONY : depend
+
+#=============================================================================
+# Target rules for targets named PROTO_LIB
+
+# Build rule for target.
+PROTO_LIB: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 PROTO_LIB
+.PHONY : PROTO_LIB
+
+# fast build rule for target.
+PROTO_LIB/fast:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/build
+.PHONY : PROTO_LIB/fast
+
+#=============================================================================
+# Target rules for targets named SOURCES_LIB
+
+# Build rule for target.
+SOURCES_LIB: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 SOURCES_LIB
+.PHONY : SOURCES_LIB
+
+# fast build rule for target.
+SOURCES_LIB/fast:
+	$(MAKE) $(MAKESILENT) -f src/CMakeFiles/SOURCES_LIB.dir/build.make src/CMakeFiles/SOURCES_LIB.dir/build
+.PHONY : SOURCES_LIB/fast
+
+#=============================================================================
+# Target rules for targets named brpc-shared
+
+# Build rule for target.
+brpc-shared: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 brpc-shared
+.PHONY : brpc-shared
+
+# fast build rule for target.
+brpc-shared/fast:
+	$(MAKE) $(MAKESILENT) -f src/CMakeFiles/brpc-shared.dir/build.make src/CMakeFiles/brpc-shared.dir/build
+.PHONY : brpc-shared/fast
+
+#=============================================================================
+# Target rules for targets named brpc-static
+
+# Build rule for target.
+brpc-static: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 brpc-static
+.PHONY : brpc-static
+
+# fast build rule for target.
+brpc-static/fast:
+	$(MAKE) $(MAKESILENT) -f src/CMakeFiles/brpc-static.dir/build.make src/CMakeFiles/brpc-static.dir/build
+.PHONY : brpc-static/fast
+
+#=============================================================================
+# Target rules for targets named protoc-gen-mcpack
+
+# Build rule for target.
+protoc-gen-mcpack: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 protoc-gen-mcpack
+.PHONY : protoc-gen-mcpack
+
+# fast build rule for target.
+protoc-gen-mcpack/fast:
+	$(MAKE) $(MAKESILENT) -f src/CMakeFiles/protoc-gen-mcpack.dir/build.make src/CMakeFiles/protoc-gen-mcpack.dir/build
+.PHONY : protoc-gen-mcpack/fast
+
+#=============================================================================
+# Target rules for targets named BUTIL_LIB
+
+# Build rule for target.
+BUTIL_LIB: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 BUTIL_LIB
+.PHONY : BUTIL_LIB
+
+# fast build rule for target.
+BUTIL_LIB/fast:
+	$(MAKE) $(MAKESILENT) -f src/CMakeFiles/BUTIL_LIB.dir/build.make src/CMakeFiles/BUTIL_LIB.dir/build
+.PHONY : BUTIL_LIB/fast
+
+#=============================================================================
+# Target rules for targets named parallel_http
+
+# Build rule for target.
+parallel_http: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 parallel_http
+.PHONY : parallel_http
+
+# fast build rule for target.
+parallel_http/fast:
+	$(MAKE) $(MAKESILENT) -f tools/parallel_http/CMakeFiles/parallel_http.dir/build.make tools/parallel_http/CMakeFiles/parallel_http.dir/build
+.PHONY : parallel_http/fast
+
+#=============================================================================
+# Target rules for targets named rpc_press
+
+# Build rule for target.
+rpc_press: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 rpc_press
+.PHONY : rpc_press
+
+# fast build rule for target.
+rpc_press/fast:
+	$(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/build
+.PHONY : rpc_press/fast
+
+#=============================================================================
+# Target rules for targets named rpc_replay
+
+# Build rule for target.
+rpc_replay: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 rpc_replay
+.PHONY : rpc_replay
+
+# fast build rule for target.
+rpc_replay/fast:
+	$(MAKE) $(MAKESILENT) -f tools/rpc_replay/CMakeFiles/rpc_replay.dir/build.make tools/rpc_replay/CMakeFiles/rpc_replay.dir/build
+.PHONY : rpc_replay/fast
+
+#=============================================================================
+# Target rules for targets named rpc_view
+
+# Build rule for target.
+rpc_view: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 rpc_view
+.PHONY : rpc_view
+
+# fast build rule for target.
+rpc_view/fast:
+	$(MAKE) $(MAKESILENT) -f tools/rpc_view/CMakeFiles/rpc_view.dir/build.make tools/rpc_view/CMakeFiles/rpc_view.dir/build
+.PHONY : rpc_view/fast
+
+#=============================================================================
+# Target rules for targets named trackme_server
+
+# Build rule for target.
+trackme_server: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 trackme_server
+.PHONY : trackme_server
+
+# fast build rule for target.
+trackme_server/fast:
+	$(MAKE) $(MAKESILENT) -f tools/trackme_server/CMakeFiles/trackme_server.dir/build.make tools/trackme_server/CMakeFiles/trackme_server.dir/build
+.PHONY : trackme_server/fast
+
+brpc/builtin_service.pb.o: brpc/builtin_service.pb.cc.o
+
+.PHONY : brpc/builtin_service.pb.o
+
+# target to build an object file
+brpc/builtin_service.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/builtin_service.pb.cc.o
+.PHONY : brpc/builtin_service.pb.cc.o
+
+brpc/builtin_service.pb.i: brpc/builtin_service.pb.cc.i
+
+.PHONY : brpc/builtin_service.pb.i
+
+# target to preprocess a source file
+brpc/builtin_service.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/builtin_service.pb.cc.i
+.PHONY : brpc/builtin_service.pb.cc.i
+
+brpc/builtin_service.pb.s: brpc/builtin_service.pb.cc.s
+
+.PHONY : brpc/builtin_service.pb.s
+
+# target to generate assembly for a file
+brpc/builtin_service.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/builtin_service.pb.cc.s
+.PHONY : brpc/builtin_service.pb.cc.s
+
+brpc/errno.pb.o: brpc/errno.pb.cc.o
+
+.PHONY : brpc/errno.pb.o
+
+# target to build an object file
+brpc/errno.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/errno.pb.cc.o
+.PHONY : brpc/errno.pb.cc.o
+
+brpc/errno.pb.i: brpc/errno.pb.cc.i
+
+.PHONY : brpc/errno.pb.i
+
+# target to preprocess a source file
+brpc/errno.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/errno.pb.cc.i
+.PHONY : brpc/errno.pb.cc.i
+
+brpc/errno.pb.s: brpc/errno.pb.cc.s
+
+.PHONY : brpc/errno.pb.s
+
+# target to generate assembly for a file
+brpc/errno.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/errno.pb.cc.s
+.PHONY : brpc/errno.pb.cc.s
+
+brpc/get_favicon.pb.o: brpc/get_favicon.pb.cc.o
+
+.PHONY : brpc/get_favicon.pb.o
+
+# target to build an object file
+brpc/get_favicon.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_favicon.pb.cc.o
+.PHONY : brpc/get_favicon.pb.cc.o
+
+brpc/get_favicon.pb.i: brpc/get_favicon.pb.cc.i
+
+.PHONY : brpc/get_favicon.pb.i
+
+# target to preprocess a source file
+brpc/get_favicon.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_favicon.pb.cc.i
+.PHONY : brpc/get_favicon.pb.cc.i
+
+brpc/get_favicon.pb.s: brpc/get_favicon.pb.cc.s
+
+.PHONY : brpc/get_favicon.pb.s
+
+# target to generate assembly for a file
+brpc/get_favicon.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_favicon.pb.cc.s
+.PHONY : brpc/get_favicon.pb.cc.s
+
+brpc/get_js.pb.o: brpc/get_js.pb.cc.o
+
+.PHONY : brpc/get_js.pb.o
+
+# target to build an object file
+brpc/get_js.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_js.pb.cc.o
+.PHONY : brpc/get_js.pb.cc.o
+
+brpc/get_js.pb.i: brpc/get_js.pb.cc.i
+
+.PHONY : brpc/get_js.pb.i
+
+# target to preprocess a source file
+brpc/get_js.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_js.pb.cc.i
+.PHONY : brpc/get_js.pb.cc.i
+
+brpc/get_js.pb.s: brpc/get_js.pb.cc.s
+
+.PHONY : brpc/get_js.pb.s
+
+# target to generate assembly for a file
+brpc/get_js.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_js.pb.cc.s
+.PHONY : brpc/get_js.pb.cc.s
+
+brpc/nshead_meta.pb.o: brpc/nshead_meta.pb.cc.o
+
+.PHONY : brpc/nshead_meta.pb.o
+
+# target to build an object file
+brpc/nshead_meta.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/nshead_meta.pb.cc.o
+.PHONY : brpc/nshead_meta.pb.cc.o
+
+brpc/nshead_meta.pb.i: brpc/nshead_meta.pb.cc.i
+
+.PHONY : brpc/nshead_meta.pb.i
+
+# target to preprocess a source file
+brpc/nshead_meta.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/nshead_meta.pb.cc.i
+.PHONY : brpc/nshead_meta.pb.cc.i
+
+brpc/nshead_meta.pb.s: brpc/nshead_meta.pb.cc.s
+
+.PHONY : brpc/nshead_meta.pb.s
+
+# target to generate assembly for a file
+brpc/nshead_meta.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/nshead_meta.pb.cc.s
+.PHONY : brpc/nshead_meta.pb.cc.s
+
+brpc/options.pb.o: brpc/options.pb.cc.o
+
+.PHONY : brpc/options.pb.o
+
+# target to build an object file
+brpc/options.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/options.pb.cc.o
+.PHONY : brpc/options.pb.cc.o
+
+brpc/options.pb.i: brpc/options.pb.cc.i
+
+.PHONY : brpc/options.pb.i
+
+# target to preprocess a source file
+brpc/options.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/options.pb.cc.i
+.PHONY : brpc/options.pb.cc.i
+
+brpc/options.pb.s: brpc/options.pb.cc.s
+
+.PHONY : brpc/options.pb.s
+
+# target to generate assembly for a file
+brpc/options.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/options.pb.cc.s
+.PHONY : brpc/options.pb.cc.s
+
+brpc/policy/baidu_rpc_meta.pb.o: brpc/policy/baidu_rpc_meta.pb.cc.o
+
+.PHONY : brpc/policy/baidu_rpc_meta.pb.o
+
+# target to build an object file
+brpc/policy/baidu_rpc_meta.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/baidu_rpc_meta.pb.cc.o
+.PHONY : brpc/policy/baidu_rpc_meta.pb.cc.o
+
+brpc/policy/baidu_rpc_meta.pb.i: brpc/policy/baidu_rpc_meta.pb.cc.i
+
+.PHONY : brpc/policy/baidu_rpc_meta.pb.i
+
+# target to preprocess a source file
+brpc/policy/baidu_rpc_meta.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/baidu_rpc_meta.pb.cc.i
+.PHONY : brpc/policy/baidu_rpc_meta.pb.cc.i
+
+brpc/policy/baidu_rpc_meta.pb.s: brpc/policy/baidu_rpc_meta.pb.cc.s
+
+.PHONY : brpc/policy/baidu_rpc_meta.pb.s
+
+# target to generate assembly for a file
+brpc/policy/baidu_rpc_meta.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/baidu_rpc_meta.pb.cc.s
+.PHONY : brpc/policy/baidu_rpc_meta.pb.cc.s
+
+brpc/policy/hulu_pbrpc_meta.pb.o: brpc/policy/hulu_pbrpc_meta.pb.cc.o
+
+.PHONY : brpc/policy/hulu_pbrpc_meta.pb.o
+
+# target to build an object file
+brpc/policy/hulu_pbrpc_meta.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/hulu_pbrpc_meta.pb.cc.o
+.PHONY : brpc/policy/hulu_pbrpc_meta.pb.cc.o
+
+brpc/policy/hulu_pbrpc_meta.pb.i: brpc/policy/hulu_pbrpc_meta.pb.cc.i
+
+.PHONY : brpc/policy/hulu_pbrpc_meta.pb.i
+
+# target to preprocess a source file
+brpc/policy/hulu_pbrpc_meta.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/hulu_pbrpc_meta.pb.cc.i
+.PHONY : brpc/policy/hulu_pbrpc_meta.pb.cc.i
+
+brpc/policy/hulu_pbrpc_meta.pb.s: brpc/policy/hulu_pbrpc_meta.pb.cc.s
+
+.PHONY : brpc/policy/hulu_pbrpc_meta.pb.s
+
+# target to generate assembly for a file
+brpc/policy/hulu_pbrpc_meta.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/hulu_pbrpc_meta.pb.cc.s
+.PHONY : brpc/policy/hulu_pbrpc_meta.pb.cc.s
+
+brpc/policy/mongo.pb.o: brpc/policy/mongo.pb.cc.o
+
+.PHONY : brpc/policy/mongo.pb.o
+
+# target to build an object file
+brpc/policy/mongo.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/mongo.pb.cc.o
+.PHONY : brpc/policy/mongo.pb.cc.o
+
+brpc/policy/mongo.pb.i: brpc/policy/mongo.pb.cc.i
+
+.PHONY : brpc/policy/mongo.pb.i
+
+# target to preprocess a source file
+brpc/policy/mongo.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/mongo.pb.cc.i
+.PHONY : brpc/policy/mongo.pb.cc.i
+
+brpc/policy/mongo.pb.s: brpc/policy/mongo.pb.cc.s
+
+.PHONY : brpc/policy/mongo.pb.s
+
+# target to generate assembly for a file
+brpc/policy/mongo.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/mongo.pb.cc.s
+.PHONY : brpc/policy/mongo.pb.cc.s
+
+brpc/policy/public_pbrpc_meta.pb.o: brpc/policy/public_pbrpc_meta.pb.cc.o
+
+.PHONY : brpc/policy/public_pbrpc_meta.pb.o
+
+# target to build an object file
+brpc/policy/public_pbrpc_meta.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/public_pbrpc_meta.pb.cc.o
+.PHONY : brpc/policy/public_pbrpc_meta.pb.cc.o
+
+brpc/policy/public_pbrpc_meta.pb.i: brpc/policy/public_pbrpc_meta.pb.cc.i
+
+.PHONY : brpc/policy/public_pbrpc_meta.pb.i
+
+# target to preprocess a source file
+brpc/policy/public_pbrpc_meta.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/public_pbrpc_meta.pb.cc.i
+.PHONY : brpc/policy/public_pbrpc_meta.pb.cc.i
+
+brpc/policy/public_pbrpc_meta.pb.s: brpc/policy/public_pbrpc_meta.pb.cc.s
+
+.PHONY : brpc/policy/public_pbrpc_meta.pb.s
+
+# target to generate assembly for a file
+brpc/policy/public_pbrpc_meta.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/public_pbrpc_meta.pb.cc.s
+.PHONY : brpc/policy/public_pbrpc_meta.pb.cc.s
+
+brpc/policy/sofa_pbrpc_meta.pb.o: brpc/policy/sofa_pbrpc_meta.pb.cc.o
+
+.PHONY : brpc/policy/sofa_pbrpc_meta.pb.o
+
+# target to build an object file
+brpc/policy/sofa_pbrpc_meta.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/sofa_pbrpc_meta.pb.cc.o
+.PHONY : brpc/policy/sofa_pbrpc_meta.pb.cc.o
+
+brpc/policy/sofa_pbrpc_meta.pb.i: brpc/policy/sofa_pbrpc_meta.pb.cc.i
+
+.PHONY : brpc/policy/sofa_pbrpc_meta.pb.i
+
+# target to preprocess a source file
+brpc/policy/sofa_pbrpc_meta.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/sofa_pbrpc_meta.pb.cc.i
+.PHONY : brpc/policy/sofa_pbrpc_meta.pb.cc.i
+
+brpc/policy/sofa_pbrpc_meta.pb.s: brpc/policy/sofa_pbrpc_meta.pb.cc.s
+
+.PHONY : brpc/policy/sofa_pbrpc_meta.pb.s
+
+# target to generate assembly for a file
+brpc/policy/sofa_pbrpc_meta.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/sofa_pbrpc_meta.pb.cc.s
+.PHONY : brpc/policy/sofa_pbrpc_meta.pb.cc.s
+
+brpc/proto_base.pb.o: brpc/proto_base.pb.cc.o
+
+.PHONY : brpc/proto_base.pb.o
+
+# target to build an object file
+brpc/proto_base.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/proto_base.pb.cc.o
+.PHONY : brpc/proto_base.pb.cc.o
+
+brpc/proto_base.pb.i: brpc/proto_base.pb.cc.i
+
+.PHONY : brpc/proto_base.pb.i
+
+# target to preprocess a source file
+brpc/proto_base.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/proto_base.pb.cc.i
+.PHONY : brpc/proto_base.pb.cc.i
+
+brpc/proto_base.pb.s: brpc/proto_base.pb.cc.s
+
+.PHONY : brpc/proto_base.pb.s
+
+# target to generate assembly for a file
+brpc/proto_base.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/proto_base.pb.cc.s
+.PHONY : brpc/proto_base.pb.cc.s
+
+brpc/rpc_dump.pb.o: brpc/rpc_dump.pb.cc.o
+
+.PHONY : brpc/rpc_dump.pb.o
+
+# target to build an object file
+brpc/rpc_dump.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rpc_dump.pb.cc.o
+.PHONY : brpc/rpc_dump.pb.cc.o
+
+brpc/rpc_dump.pb.i: brpc/rpc_dump.pb.cc.i
+
+.PHONY : brpc/rpc_dump.pb.i
+
+# target to preprocess a source file
+brpc/rpc_dump.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rpc_dump.pb.cc.i
+.PHONY : brpc/rpc_dump.pb.cc.i
+
+brpc/rpc_dump.pb.s: brpc/rpc_dump.pb.cc.s
+
+.PHONY : brpc/rpc_dump.pb.s
+
+# target to generate assembly for a file
+brpc/rpc_dump.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rpc_dump.pb.cc.s
+.PHONY : brpc/rpc_dump.pb.cc.s
+
+brpc/rtmp.pb.o: brpc/rtmp.pb.cc.o
+
+.PHONY : brpc/rtmp.pb.o
+
+# target to build an object file
+brpc/rtmp.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rtmp.pb.cc.o
+.PHONY : brpc/rtmp.pb.cc.o
+
+brpc/rtmp.pb.i: brpc/rtmp.pb.cc.i
+
+.PHONY : brpc/rtmp.pb.i
+
+# target to preprocess a source file
+brpc/rtmp.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rtmp.pb.cc.i
+.PHONY : brpc/rtmp.pb.cc.i
+
+brpc/rtmp.pb.s: brpc/rtmp.pb.cc.s
+
+.PHONY : brpc/rtmp.pb.s
+
+# target to generate assembly for a file
+brpc/rtmp.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rtmp.pb.cc.s
+.PHONY : brpc/rtmp.pb.cc.s
+
+brpc/span.pb.o: brpc/span.pb.cc.o
+
+.PHONY : brpc/span.pb.o
+
+# target to build an object file
+brpc/span.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/span.pb.cc.o
+.PHONY : brpc/span.pb.cc.o
+
+brpc/span.pb.i: brpc/span.pb.cc.i
+
+.PHONY : brpc/span.pb.i
+
+# target to preprocess a source file
+brpc/span.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/span.pb.cc.i
+.PHONY : brpc/span.pb.cc.i
+
+brpc/span.pb.s: brpc/span.pb.cc.s
+
+.PHONY : brpc/span.pb.s
+
+# target to generate assembly for a file
+brpc/span.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/span.pb.cc.s
+.PHONY : brpc/span.pb.cc.s
+
+brpc/streaming_rpc_meta.pb.o: brpc/streaming_rpc_meta.pb.cc.o
+
+.PHONY : brpc/streaming_rpc_meta.pb.o
+
+# target to build an object file
+brpc/streaming_rpc_meta.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/streaming_rpc_meta.pb.cc.o
+.PHONY : brpc/streaming_rpc_meta.pb.cc.o
+
+brpc/streaming_rpc_meta.pb.i: brpc/streaming_rpc_meta.pb.cc.i
+
+.PHONY : brpc/streaming_rpc_meta.pb.i
+
+# target to preprocess a source file
+brpc/streaming_rpc_meta.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/streaming_rpc_meta.pb.cc.i
+.PHONY : brpc/streaming_rpc_meta.pb.cc.i
+
+brpc/streaming_rpc_meta.pb.s: brpc/streaming_rpc_meta.pb.cc.s
+
+.PHONY : brpc/streaming_rpc_meta.pb.s
+
+# target to generate assembly for a file
+brpc/streaming_rpc_meta.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/streaming_rpc_meta.pb.cc.s
+.PHONY : brpc/streaming_rpc_meta.pb.cc.s
+
+brpc/trackme.pb.o: brpc/trackme.pb.cc.o
+
+.PHONY : brpc/trackme.pb.o
+
+# target to build an object file
+brpc/trackme.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/trackme.pb.cc.o
+.PHONY : brpc/trackme.pb.cc.o
+
+brpc/trackme.pb.i: brpc/trackme.pb.cc.i
+
+.PHONY : brpc/trackme.pb.i
+
+# target to preprocess a source file
+brpc/trackme.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/trackme.pb.cc.i
+.PHONY : brpc/trackme.pb.cc.i
+
+brpc/trackme.pb.s: brpc/trackme.pb.cc.s
+
+.PHONY : brpc/trackme.pb.s
+
+# target to generate assembly for a file
+brpc/trackme.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/trackme.pb.cc.s
+.PHONY : brpc/trackme.pb.cc.s
+
+idl_options.pb.o: idl_options.pb.cc.o
+
+.PHONY : idl_options.pb.o
+
+# target to build an object file
+idl_options.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/idl_options.pb.cc.o
+.PHONY : idl_options.pb.cc.o
+
+idl_options.pb.i: idl_options.pb.cc.i
+
+.PHONY : idl_options.pb.i
+
+# target to preprocess a source file
+idl_options.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/idl_options.pb.cc.i
+.PHONY : idl_options.pb.cc.i
+
+idl_options.pb.s: idl_options.pb.cc.s
+
+.PHONY : idl_options.pb.s
+
+# target to generate assembly for a file
+idl_options.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/idl_options.pb.cc.s
+.PHONY : idl_options.pb.cc.s
+
+# Help Target
+help:
+	@echo "The following are some of the valid targets for this Makefile:"
+	@echo "... all (the default if no target is provided)"
+	@echo "... clean"
+	@echo "... depend"
+	@echo "... edit_cache"
+	@echo "... install"
+	@echo "... install/local"
+	@echo "... install/strip"
+	@echo "... list_install_components"
+	@echo "... package"
+	@echo "... package_source"
+	@echo "... rebuild_cache"
+	@echo "... BUTIL_LIB"
+	@echo "... PROTO_LIB"
+	@echo "... SOURCES_LIB"
+	@echo "... brpc-shared"
+	@echo "... brpc-static"
+	@echo "... parallel_http"
+	@echo "... protoc-gen-mcpack"
+	@echo "... rpc_press"
+	@echo "... rpc_replay"
+	@echo "... rpc_view"
+	@echo "... trackme_server"
+	@echo "... brpc/builtin_service.pb.o"
+	@echo "... brpc/builtin_service.pb.i"
+	@echo "... brpc/builtin_service.pb.s"
+	@echo "... brpc/errno.pb.o"
+	@echo "... brpc/errno.pb.i"
+	@echo "... brpc/errno.pb.s"
+	@echo "... brpc/get_favicon.pb.o"
+	@echo "... brpc/get_favicon.pb.i"
+	@echo "... brpc/get_favicon.pb.s"
+	@echo "... brpc/get_js.pb.o"
+	@echo "... brpc/get_js.pb.i"
+	@echo "... brpc/get_js.pb.s"
+	@echo "... brpc/nshead_meta.pb.o"
+	@echo "... brpc/nshead_meta.pb.i"
+	@echo "... brpc/nshead_meta.pb.s"
+	@echo "... brpc/options.pb.o"
+	@echo "... brpc/options.pb.i"
+	@echo "... brpc/options.pb.s"
+	@echo "... brpc/policy/baidu_rpc_meta.pb.o"
+	@echo "... brpc/policy/baidu_rpc_meta.pb.i"
+	@echo "... brpc/policy/baidu_rpc_meta.pb.s"
+	@echo "... brpc/policy/hulu_pbrpc_meta.pb.o"
+	@echo "... brpc/policy/hulu_pbrpc_meta.pb.i"
+	@echo "... brpc/policy/hulu_pbrpc_meta.pb.s"
+	@echo "... brpc/policy/mongo.pb.o"
+	@echo "... brpc/policy/mongo.pb.i"
+	@echo "... brpc/policy/mongo.pb.s"
+	@echo "... brpc/policy/public_pbrpc_meta.pb.o"
+	@echo "... brpc/policy/public_pbrpc_meta.pb.i"
+	@echo "... brpc/policy/public_pbrpc_meta.pb.s"
+	@echo "... brpc/policy/sofa_pbrpc_meta.pb.o"
+	@echo "... brpc/policy/sofa_pbrpc_meta.pb.i"
+	@echo "... brpc/policy/sofa_pbrpc_meta.pb.s"
+	@echo "... brpc/proto_base.pb.o"
+	@echo "... brpc/proto_base.pb.i"
+	@echo "... brpc/proto_base.pb.s"
+	@echo "... brpc/rpc_dump.pb.o"
+	@echo "... brpc/rpc_dump.pb.i"
+	@echo "... brpc/rpc_dump.pb.s"
+	@echo "... brpc/rtmp.pb.o"
+	@echo "... brpc/rtmp.pb.i"
+	@echo "... brpc/rtmp.pb.s"
+	@echo "... brpc/span.pb.o"
+	@echo "... brpc/span.pb.i"
+	@echo "... brpc/span.pb.s"
+	@echo "... brpc/streaming_rpc_meta.pb.o"
+	@echo "... brpc/streaming_rpc_meta.pb.i"
+	@echo "... brpc/streaming_rpc_meta.pb.s"
+	@echo "... brpc/trackme.pb.o"
+	@echo "... brpc/trackme.pb.i"
+	@echo "... brpc/trackme.pb.s"
+	@echo "... idl_options.pb.o"
+	@echo "... idl_options.pb.i"
+	@echo "... idl_options.pb.s"
+.PHONY : help
+
+
+
+#=============================================================================
+# Special targets to cleanup operation of make.
+
+# Special rule to run CMake to check the build system integrity.
+# No rule that depends on this can have commands that come from listfiles
+# because they might be regenerated.
+cmake_check_build_system:
+	$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
+.PHONY : cmake_check_build_system
+
diff --git a/src/brpc/acceptor.cpp b/src/brpc/acceptor.cpp
index 0e12751..d094ef2 100644
--- a/src/brpc/acceptor.cpp
+++ b/src/brpc/acceptor.cpp
@@ -22,7 +22,7 @@
 #include "butil/fd_utility.h"               // make_close_on_exec
 #include "butil/time.h"                     // gettimeofday_us
 #include "brpc/acceptor.h"
-
+#include "butil/logging.h"
 
 namespace brpc {
 
diff --git a/src/brpc/builtin/bad_method_service.cpp b/src/brpc/builtin/bad_method_service.cpp
index 346b68d..d5c093d 100644
--- a/src/brpc/builtin/bad_method_service.cpp
+++ b/src/brpc/builtin/bad_method_service.cpp
@@ -17,6 +17,7 @@
 
 
 #include <ostream>
+#include <sstream>
 #include <vector>
 #include <google/protobuf/descriptor.h>
 
diff --git a/src/brpc/builtin/dir_service.cpp b/src/brpc/builtin/dir_service.cpp
index 98973b9..06a4a44 100644
--- a/src/brpc/builtin/dir_service.cpp
+++ b/src/brpc/builtin/dir_service.cpp
@@ -26,7 +26,7 @@
 #include "brpc/controller.h"           // Controller
 #include "brpc/builtin/common.h"
 #include "brpc/builtin/dir_service.h"
-
+#include "butil/logging.h"
 
 namespace brpc {
 
diff --git a/src/brpc/builtin/hotspots_service.cpp b/src/brpc/builtin/hotspots_service.cpp
index 5961274..daab4b1 100644
--- a/src/brpc/builtin/hotspots_service.cpp
+++ b/src/brpc/builtin/hotspots_service.cpp
@@ -23,6 +23,7 @@
 #include "butil/file_util.h"                     // butil::FilePath
 #include "butil/popen.h"                         // butil::read_command_output
 #include "butil/fd_guard.h"                      // butil::fd_guard
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/controller.h"
 #include "brpc/server.h"
diff --git a/src/brpc/builtin/index_service.cpp b/src/brpc/builtin/index_service.cpp
index f067b55..ecdc1c4 100644
--- a/src/brpc/builtin/index_service.cpp
+++ b/src/brpc/builtin/index_service.cpp
@@ -15,7 +15,7 @@
 // specific language governing permissions and limitations
 // under the License.
 
-
+#include <sstream>
 #include <gflags/gflags.h>                  // DECLARE_xxx
 #include <google/protobuf/descriptor.h>
 #include "butil/time.h"                      // gettimeofday_us
diff --git a/src/brpc/builtin/pprof_service.cpp b/src/brpc/builtin/pprof_service.cpp
index abc2b8e..64b2d3f 100644
--- a/src/brpc/builtin/pprof_service.cpp
+++ b/src/brpc/builtin/pprof_service.cpp
@@ -28,6 +28,7 @@
 #include "butil/time.h"
 #include "butil/popen.h"                    // butil::read_command_output
 #include "butil/process_util.h"             // butil::ReadCommandLine
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/controller.h"                // Controller
 #include "brpc/closure_guard.h"             // ClosureGuard
diff --git a/src/brpc/builtin/prometheus_metrics_service.cpp b/src/brpc/builtin/prometheus_metrics_service.cpp
index 5eddb1a..1d18ca2 100644
--- a/src/brpc/builtin/prometheus_metrics_service.cpp
+++ b/src/brpc/builtin/prometheus_metrics_service.cpp
@@ -25,6 +25,7 @@
 #include "brpc/builtin/prometheus_metrics_service.h"
 #include "brpc/builtin/common.h"
 #include "bvar/bvar.h"
+#include "butil/logging.h"
 
 namespace bvar {
 DECLARE_int32(bvar_latency_p1);
diff --git a/src/brpc/builtin/protobufs_service.cpp b/src/brpc/builtin/protobufs_service.cpp
index 2344e46..a3ec5c4 100644
--- a/src/brpc/builtin/protobufs_service.cpp
+++ b/src/brpc/builtin/protobufs_service.cpp
@@ -23,7 +23,7 @@
 #include "brpc/details/method_status.h"// MethodStatus
 #include "brpc/builtin/protobufs_service.h"
 #include "brpc/builtin/common.h"
-
+#include "butil/logging.h"
 
 namespace brpc {
 
diff --git a/src/brpc/builtin/rpcz_service.cpp b/src/brpc/builtin/rpcz_service.cpp
index d4374e4..66c7afe 100644
--- a/src/brpc/builtin/rpcz_service.cpp
+++ b/src/brpc/builtin/rpcz_service.cpp
@@ -23,6 +23,7 @@
 #include "butil/string_splitter.h"
 #include "butil/macros.h"
 #include "butil/time.h"
+#include "butil/logging.h"
 #include "brpc/closure_guard.h"        // ClosureGuard
 #include "brpc/controller.h"           // Controller
 #include "brpc/builtin/common.h"
diff --git a/src/brpc/builtin/status_service.cpp b/src/brpc/builtin/status_service.cpp
index 0a2ca7c..dfc2f69 100644
--- a/src/brpc/builtin/status_service.cpp
+++ b/src/brpc/builtin/status_service.cpp
@@ -29,7 +29,7 @@
 #endif
 #include "brpc/rtmp.h"                 // RtmpService
 #include "brpc/builtin/common.h"
-
+#include "butil/logging.h"
 
 namespace brpc {
 namespace policy {
diff --git a/src/brpc/builtin/threads_service.cpp b/src/brpc/builtin/threads_service.cpp
index 458c1c3..16224da 100644
--- a/src/brpc/builtin/threads_service.cpp
+++ b/src/brpc/builtin/threads_service.cpp
@@ -24,6 +24,7 @@
 #include "brpc/builtin/threads_service.h"
 #include "brpc/builtin/common.h"
 #include "butil/string_printf.h"
+#include "butil/logging.h"
 
 namespace brpc {
 
diff --git a/src/brpc/builtin/vlog_service.cpp b/src/brpc/builtin/vlog_service.cpp
index 2980d0b..1490c17 100644
--- a/src/brpc/builtin/vlog_service.cpp
+++ b/src/brpc/builtin/vlog_service.cpp
@@ -18,6 +18,7 @@
 
 #if !BRPC_WITH_GLOG
 
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/controller.h"           // Controller
 #include "brpc/closure_guard.h"        // ClosureGuard
diff --git a/src/brpc/channel_base.h b/src/brpc/channel_base.h
index ed6ff24..132dd8f 100644
--- a/src/brpc/channel_base.h
+++ b/src/brpc/channel_base.h
@@ -21,7 +21,7 @@
 
 #include <stdlib.h>
 #include <ostream>
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include <google/protobuf/service.h>            // google::protobuf::RpcChannel
 #include "brpc/describable.h"
 
@@ -36,7 +36,7 @@ class ChannelBase : public google::protobuf::RpcChannel/*non-copyable*/,
                     public Describable {
 public:
     virtual int Weight() {
-        CHECK(false) << "Not implemented";
+        //CHECK(false) << "Not implemented";
         abort();
     };
 
diff --git a/src/brpc/cluster_recover_policy.cpp b/src/brpc/cluster_recover_policy.cpp
index d1338f6..1c32a18 100644
--- a/src/brpc/cluster_recover_policy.cpp
+++ b/src/brpc/cluster_recover_policy.cpp
@@ -25,6 +25,7 @@
 #include "brpc/socket.h"
 #include "butil/fast_rand.h"
 #include "butil/time.h"
+#include "butil/logging.h"
 #include "butil/string_splitter.h"
 
 namespace brpc {
diff --git a/src/brpc/controller.h b/src/brpc/controller.h
index 69b3f48..8033c4c 100755
--- a/src/brpc/controller.h
+++ b/src/brpc/controller.h
@@ -27,6 +27,7 @@
 #include "bthread/errno.h"                     // Redefine errno
 #include "butil/endpoint.h"                    // butil::EndPoint
 #include "butil/iobuf.h"                       // butil::IOBuf
+#include "butil/time.h"                        // butil::cpuwide_time_us
 #include "bthread/types.h"                     // bthread_id_t
 #include "brpc/options.pb.h"                   // CompressType
 #include "brpc/errno.pb.h"                     // error code
diff --git a/src/brpc/details/controller_private_accessor.h b/src/brpc/details/controller_private_accessor.h
index 1aa567e..7de9524 100644
--- a/src/brpc/details/controller_private_accessor.h
+++ b/src/brpc/details/controller_private_accessor.h
@@ -58,7 +58,7 @@ public:
     }
 
     void move_in_server_receiving_sock(SocketUniquePtr& ptr) {
-        CHECK(_cntl->_current_call.sending_sock == NULL);
+        //CHECK(_cntl->_current_call.sending_sock == NULL);
         _cntl->_current_call.sending_sock.reset(ptr.release());
     }
 
diff --git a/src/brpc/details/health_check.cpp b/src/brpc/details/health_check.cpp
index 6cb5f47..923411a 100644
--- a/src/brpc/details/health_check.cpp
+++ b/src/brpc/details/health_check.cpp
@@ -22,6 +22,7 @@
 #include "brpc/controller.h"
 #include "brpc/details/controller_private_accessor.h"
 #include "brpc/global.h"
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "bthread/unstable.h"
 #include "bthread/bthread.h"
diff --git a/src/brpc/details/hpack.cpp b/src/brpc/details/hpack.cpp
index 43a2d9e..7878b50 100644
--- a/src/brpc/details/hpack.cpp
+++ b/src/brpc/details/hpack.cpp
@@ -24,7 +24,7 @@
 #include "butil/containers/flat_map.h"                   // butil::FlatMap
 #include "butil/containers/case_ignored_flat_map.h"      // butil::FlatMap
 #include "brpc/details/hpack-static-table.h"       // s_static_headers
-
+#include "butil/logging.h"
 
 namespace brpc {
 
diff --git a/src/brpc/details/http_message.cpp b/src/brpc/details/http_message.cpp
index 96bb326..a262e72 100644
--- a/src/brpc/details/http_message.cpp
+++ b/src/brpc/details/http_message.cpp
@@ -27,6 +27,7 @@
 #include "butil/endpoint.h"
 #include "butil/base64.h"
 #include "bthread/bthread.h"                    // bthread_usleep
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/reloadable_flags.h"
 #include "brpc/details/http_message.h"
diff --git a/src/brpc/details/load_balancer_with_naming.cpp b/src/brpc/details/load_balancer_with_naming.cpp
index 2fad84b..e6733ba 100644
--- a/src/brpc/details/load_balancer_with_naming.cpp
+++ b/src/brpc/details/load_balancer_with_naming.cpp
@@ -17,7 +17,7 @@
 
 
 #include "brpc/details/load_balancer_with_naming.h"
-
+#include "butil/logging.h"
 
 namespace brpc {
 
diff --git a/src/brpc/details/server_private_accessor.h b/src/brpc/details/server_private_accessor.h
index aacf283..c2d84dd 100644
--- a/src/brpc/details/server_private_accessor.h
+++ b/src/brpc/details/server_private_accessor.h
@@ -32,7 +32,7 @@ namespace brpc {
 class ServerPrivateAccessor {
 public:
     explicit ServerPrivateAccessor(const Server* svr) {
-        CHECK(svr);
+        //CHECK(svr);
         _server = svr;
     }
 
diff --git a/src/brpc/details/sparse_minute_counter.h b/src/brpc/details/sparse_minute_counter.h
index 3834afa..fba627b 100644
--- a/src/brpc/details/sparse_minute_counter.h
+++ b/src/brpc/details/sparse_minute_counter.h
@@ -131,7 +131,7 @@ void SparseMinuteCounter<T>::DestroyQueue(Q* q) {
 
 template <typename T>
 void SparseMinuteCounter<T>::Resize() {
-    CHECK_LT(_q->capacity(), (size_t)60);
+    //CHECK_LT(_q->capacity(), (size_t)60);
     uint32_t new_cap = std::min(2 * (uint32_t)_q->capacity(), 60u);
     Q* new_q = CreateQueue(new_cap);
     for (size_t i = 0; i < _q->size(); ++i) {
diff --git a/src/brpc/details/usercode_backup_pool.cpp b/src/brpc/details/usercode_backup_pool.cpp
index 53a1541..d0131de 100644
--- a/src/brpc/details/usercode_backup_pool.cpp
+++ b/src/brpc/details/usercode_backup_pool.cpp
@@ -24,6 +24,7 @@
 #include "butil/comlog_sink.h"
 #endif
 #include "brpc/details/usercode_backup_pool.h"
+#include "butil/logging.h"
 
 namespace bthread {
 // Defined in bthread/task_control.cpp
diff --git a/src/brpc/extension.h b/src/brpc/extension.h
index 9d6c94b..343a73f 100644
--- a/src/brpc/extension.h
+++ b/src/brpc/extension.h
@@ -21,7 +21,7 @@
 
 #include <string>
 #include "butil/scoped_lock.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/containers/case_ignored_flat_map.h"
 #include "butil/memory/singleton_on_pthread_once.h"
 
diff --git a/src/brpc/extension_inl.h b/src/brpc/extension_inl.h
index 8eede30..8b1a1c6 100644
--- a/src/brpc/extension_inl.h
+++ b/src/brpc/extension_inl.h
@@ -41,12 +41,12 @@ Extension<T>::~Extension() {
 template <typename T>
 int Extension<T>::Register(const std::string& name, T* instance) {
     if (NULL == instance) {
-        LOG(ERROR) << "instance to \"" << name << "\" is NULL";
+        //LOG(ERROR) << "instance to \"" << name << "\" is NULL";
         return -1;
     }
     BAIDU_SCOPED_LOCK(_map_mutex);
     if (_instance_map.seek(name) != NULL) {
-        LOG(ERROR) << "\"" << name << "\" was registered";
+        //LOG(ERROR) << "\"" << name << "\" was registered";
         return -1;
     }
     _instance_map[name] = instance;
diff --git a/src/brpc/partition_channel.cpp b/src/brpc/partition_channel.cpp
index c15fddd..455c919 100644
--- a/src/brpc/partition_channel.cpp
+++ b/src/brpc/partition_channel.cpp
@@ -17,6 +17,7 @@
 
 
 #include "butil/containers/flat_map.h"
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/load_balancer.h"
 #include "brpc/details/naming_service_thread.h"
diff --git a/src/brpc/periodic_task.cpp b/src/brpc/periodic_task.cpp
index 27ea3ec..23804e4 100644
--- a/src/brpc/periodic_task.cpp
+++ b/src/brpc/periodic_task.cpp
@@ -19,6 +19,7 @@
 #include <bthread/bthread.h>
 #include <bthread/unstable.h>
 #include "brpc/periodic_task.h"
+#include "butil/logging.h"
 
 namespace brpc {
 
diff --git a/src/brpc/policy/consul_naming_service.cpp b/src/brpc/policy/consul_naming_service.cpp
index f4b2345..bf05d45 100644
--- a/src/brpc/policy/consul_naming_service.cpp
+++ b/src/brpc/policy/consul_naming_service.cpp
@@ -25,6 +25,7 @@
 #include "butil/third_party/rapidjson/prettywriter.h"
 #include "butil/time/time.h"
 #include "bthread/bthread.h"
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/channel.h"
 #include "brpc/policy/file_naming_service.h"
diff --git a/src/brpc/policy/domain_naming_service.cpp b/src/brpc/policy/domain_naming_service.cpp
index aea943c..dc9c8a4 100644
--- a/src/brpc/policy/domain_naming_service.cpp
+++ b/src/brpc/policy/domain_naming_service.cpp
@@ -21,6 +21,7 @@
 #include <stdlib.h>                                   // strtol
 #include <string>                                     // std::string
 #include "bthread/bthread.h"
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/policy/domain_naming_service.h"
 
diff --git a/src/brpc/policy/file_naming_service.cpp b/src/brpc/policy/file_naming_service.cpp
index df49673..9a32aba 100644
--- a/src/brpc/policy/file_naming_service.cpp
+++ b/src/brpc/policy/file_naming_service.cpp
@@ -22,6 +22,7 @@
 #include "butil/files/file_watcher.h"                    // FileWatcher
 #include "butil/files/scoped_file.h"                     // ScopedFILE
 #include "bthread/bthread.h"                            // bthread_usleep
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/policy/file_naming_service.h"
 
diff --git a/src/brpc/policy/http2_rpc_protocol.cpp b/src/brpc/policy/http2_rpc_protocol.cpp
index a5e89d0..1cfc482 100644
--- a/src/brpc/policy/http2_rpc_protocol.cpp
+++ b/src/brpc/policy/http2_rpc_protocol.cpp
@@ -20,6 +20,7 @@
 #include "brpc/details/controller_private_accessor.h"
 #include "brpc/server.h"
 #include "butil/base64.h"
+#include "butil/logging.h"
 #include "brpc/log.h"
 
 namespace brpc {
diff --git a/src/brpc/policy/http2_rpc_protocol.h b/src/brpc/policy/http2_rpc_protocol.h
index 8574723..f185569 100644
--- a/src/brpc/policy/http2_rpc_protocol.h
+++ b/src/brpc/policy/http2_rpc_protocol.h
@@ -399,8 +399,8 @@ friend void InitFrameHandlers();
 
 inline int H2Context::AllocateClientStreamId() {
     if (RunOutStreams()) {
-        LOG(WARNING) << "Fail to allocate new client stream, _last_sent_stream_id="
-            << _last_sent_stream_id;
+        //LOG(WARNING) << "Fail to allocate new client stream, _last_sent_stream_id="
+        //    << _last_sent_stream_id;
         return -1;
     }
     const int id = _last_sent_stream_id;
diff --git a/src/brpc/policy/list_naming_service.cpp b/src/brpc/policy/list_naming_service.cpp
index bffc9a0..7f93e7f 100644
--- a/src/brpc/policy/list_naming_service.cpp
+++ b/src/brpc/policy/list_naming_service.cpp
@@ -20,6 +20,7 @@
 #include <string>                                     // std::string
 #include <set>                                        // std::set
 #include "butil/string_splitter.h"                     // StringSplitter
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/policy/list_naming_service.h"
 
diff --git a/src/brpc/policy/locality_aware_load_balancer.cpp b/src/brpc/policy/locality_aware_load_balancer.cpp
index f97b035..4946cb6 100644
--- a/src/brpc/policy/locality_aware_load_balancer.cpp
+++ b/src/brpc/policy/locality_aware_load_balancer.cpp
@@ -20,6 +20,7 @@
 #include <gflags/gflags.h>
 #include "butil/time.h"                                       // gettimeofday_us
 #include "butil/fast_rand.h"
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/socket.h"
 #include "brpc/reloadable_flags.h"
diff --git a/src/brpc/policy/locality_aware_load_balancer.h b/src/brpc/policy/locality_aware_load_balancer.h
index 0e40101..9690b5d 100644
--- a/src/brpc/policy/locality_aware_load_balancer.h
+++ b/src/brpc/policy/locality_aware_load_balancer.h
@@ -118,7 +118,7 @@ private:
         butil::FlatMap<SocketId, size_t> server_map;
 
         Servers() {
-            CHECK_EQ(0, server_map.init(1024, 70));
+            //CHECK_EQ(0, server_map.init(1024, 70));
         }
 
         // Add diff to left_weight of all parent nodes of node `index'.
diff --git a/src/brpc/policy/nshead_protocol.cpp b/src/brpc/policy/nshead_protocol.cpp
index 1c2186b..09f1903 100644
--- a/src/brpc/policy/nshead_protocol.cpp
+++ b/src/brpc/policy/nshead_protocol.cpp
@@ -21,6 +21,7 @@
 #include <gflags/gflags.h>
 #include "butil/time.h" 
 #include "butil/iobuf.h"                         // butil::IOBuf
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/controller.h"               // Controller
 #include "brpc/socket.h"                   // Socket
diff --git a/src/brpc/policy/remote_file_naming_service.cpp b/src/brpc/policy/remote_file_naming_service.cpp
index c5aeac9..be20126 100644
--- a/src/brpc/policy/remote_file_naming_service.cpp
+++ b/src/brpc/policy/remote_file_naming_service.cpp
@@ -22,6 +22,7 @@
 #include <set>                                          // std::set
 #include "bthread/bthread.h"                            // bthread_usleep
 #include "butil/iobuf.h"
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/channel.h"
 #include "brpc/policy/remote_file_naming_service.h"
diff --git a/src/brpc/policy/rtmp_protocol.cpp b/src/brpc/policy/rtmp_protocol.cpp
index 2e7d509..64535cd 100644
--- a/src/brpc/policy/rtmp_protocol.cpp
+++ b/src/brpc/policy/rtmp_protocol.cpp
@@ -21,6 +21,7 @@
 #include "butil/scoped_lock.h"
 #include "butil/fast_rand.h"
 #include "butil/sys_byteorder.h"
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/server.h"
 #include "brpc/details/controller_private_accessor.h"
diff --git a/src/brpc/policy/rtmp_protocol.h b/src/brpc/policy/rtmp_protocol.h
index b5572c2..1a88d08 100644
--- a/src/brpc/policy/rtmp_protocol.h
+++ b/src/brpc/policy/rtmp_protocol.h
@@ -608,7 +608,7 @@ inline void WriteBigEndian2Bytes(char** buf, uint16_t val) {
 }
 inline void WriteBigEndian3Bytes(char** buf, uint32_t val) {
     const char* p = (const char*)&val;
-    CHECK_EQ(p[3], 0);
+    //CHECK_EQ(p[3], 0);
     char* out = *buf;
     out[0] = p[2];
     out[1] = p[1];
diff --git a/src/brpc/policy/thrift_protocol.cpp b/src/brpc/policy/thrift_protocol.cpp
index eae081a..124b2ed 100755
--- a/src/brpc/policy/thrift_protocol.cpp
+++ b/src/brpc/policy/thrift_protocol.cpp
@@ -22,6 +22,7 @@
 
 #include "butil/time.h" 
 #include "butil/iobuf.h"                        // butil::IOBuf
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/controller.h"                    // Controller
 #include "brpc/socket.h"                        // Socket
diff --git a/src/brpc/protocol.h b/src/brpc/protocol.h
index c1e0602..f8fcea7 100755
--- a/src/brpc/protocol.h
+++ b/src/brpc/protocol.h
@@ -27,7 +27,7 @@
 #include <gflags/gflags_declare.h>                 // DECLARE_xxx
 #include "butil/endpoint.h"                         // butil::EndPoint
 #include "butil/iobuf.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "brpc/options.pb.h"                  // ProtocolType
 #include "brpc/socket_id.h"                   // SocketId
 #include "brpc/parse_result.h"                // ParseResult
@@ -221,7 +221,7 @@ public:
         if (_size < N) {
             return _arr[_size++];
         } else {
-            CHECK(false) << "push to a full array, cap=" << N;
+            //CHECK(false) << "push to a full array, cap=" << N;
             static T dummy;
             return dummy;
         }
diff --git a/src/brpc/redis_reply.h b/src/brpc/redis_reply.h
index d2515d8..a608bcc 100644
--- a/src/brpc/redis_reply.h
+++ b/src/brpc/redis_reply.h
@@ -22,7 +22,7 @@
 #include "butil/iobuf.h"                  // butil::IOBuf
 #include "butil/strings/string_piece.h"   // butil::StringPiece
 #include "butil/arena.h"                  // butil::Arena
-#include "butil/logging.h"                // CHECK
+//#include "butil/logging.h"                // CHECK
 #include "parse_result.h"                 // ParseError
 
 
@@ -197,8 +197,8 @@ inline int64_t RedisReply::integer() const {
     if (is_integer()) {
         return _data.integer;
     }
-    CHECK(false) << "The reply is " << RedisReplyTypeToString(_type)
-                 << ", not an integer";
+    //CHECK(false) << "The reply is " << RedisReplyTypeToString(_type)
+    //             << ", not an integer";
     return 0;
 }
 
@@ -265,8 +265,8 @@ inline const char* RedisReply::c_str() const {
             return _data.long_str;
         }
     }
-    CHECK(false) << "The reply is " << RedisReplyTypeToString(_type)
-                 << ", not a string";
+    //CHECK(false) << "The reply is " << RedisReplyTypeToString(_type)
+    //             << ", not a string";
     return "";
 }
 
@@ -278,8 +278,8 @@ inline butil::StringPiece RedisReply::data() const {
             return butil::StringPiece(_data.long_str, _length);
         }
     }
-    CHECK(false) << "The reply is " << RedisReplyTypeToString(_type)
-                 << ", not a string";
+    //CHECK(false) << "The reply is " << RedisReplyTypeToString(_type)
+    //             << ", not a string";
     return butil::StringPiece();
 }
 
@@ -291,8 +291,8 @@ inline const char* RedisReply::error_message() const {
             return _data.long_str;
         }
     }
-    CHECK(false) << "The reply is " << RedisReplyTypeToString(_type)
-                 << ", not an error";
+    //CHECK(false) << "The reply is " << RedisReplyTypeToString(_type)
+    //             << ", not an error";
     return "";
 }
 
diff --git a/src/brpc/rpc_dump.cpp b/src/brpc/rpc_dump.cpp
index bf3d7fc..625ffe1 100644
--- a/src/brpc/rpc_dump.cpp
+++ b/src/brpc/rpc_dump.cpp
@@ -28,6 +28,7 @@
 #include "brpc/reloadable_flags.h"
 #include "brpc/rpc_dump.h"
 #include "brpc/protocol.h"
+#include "butil/logging.h"
 
 namespace bvar {
 std::string read_command_name();
diff --git a/src/brpc/rtmp.cpp b/src/brpc/rtmp.cpp
index 3797972..2baebe7 100644
--- a/src/brpc/rtmp.cpp
+++ b/src/brpc/rtmp.cpp
@@ -20,6 +20,7 @@
 #include <google/protobuf/io/zero_copy_stream_impl_lite.h> // StringOutputStream
 #include "bthread/bthread.h"                      // bthread_id_xx
 #include "bthread/unstable.h"                     // bthread_timer_del
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/callback.h"                   // Closure
 #include "brpc/channel.h"                    // Channel
diff --git a/src/brpc/server_id.cpp b/src/brpc/server_id.cpp
index c3a595b..57314a0 100644
--- a/src/brpc/server_id.cpp
+++ b/src/brpc/server_id.cpp
@@ -17,7 +17,7 @@
 
 
 #include "brpc/server_id.h"
-
+#include "butil/logging.h"
 
 namespace brpc {
 
diff --git a/src/brpc/simple_data_pool.h b/src/brpc/simple_data_pool.h
index affd8f1..33f0026 100644
--- a/src/brpc/simple_data_pool.h
+++ b/src/brpc/simple_data_pool.h
@@ -21,7 +21,7 @@
 
 #include "butil/scoped_lock.h"
 #include "brpc/data_factory.h"
-
+#include "butil/atomicops.h"
 
 namespace brpc {
 
diff --git a/src/brpc/socket_inl.h b/src/brpc/socket_inl.h
index 31ce6a9..c16a6a0 100644
--- a/src/brpc/socket_inl.h
+++ b/src/brpc/socket_inl.h
@@ -114,10 +114,10 @@ inline int Socket::Dereference() {
             }
             return 0;
         }
-        LOG(FATAL) << "Invalid SocketId=" << id;
+        //LOG(FATAL) << "Invalid SocketId=" << id;
         return -1;
     }
-    LOG(FATAL) << "Over dereferenced SocketId=" << id;
+    //LOG(FATAL) << "Over dereferenced SocketId=" << id;
     return -1;
 }
 
@@ -153,15 +153,15 @@ inline int Socket::Address(SocketId id, SocketUniquePtr* ptr) {
                         return_resource(SlotOfSocketId(id));
                     }
                 } else {
-                    CHECK(false) << "ref-version=" << ver1
-                                 << " unref-version=" << ver2;
+                    //CHECK(false) << "ref-version=" << ver1
+                    //             << " unref-version=" << ver2;
                 }
             } else {
-                CHECK_EQ(ver1, ver2);
+                //CHECK_EQ(ver1, ver2);
                 // Addressed a free slot.
             }
         } else {
-            CHECK(false) << "Over dereferenced SocketId=" << id;
+            //CHECK(false) << "Over dereferenced SocketId=" << id;
         }
     }
     return -1;
@@ -206,14 +206,14 @@ inline int Socket::AddressFailedAsWell(SocketId id, SocketUniquePtr* ptr) {
                         return_resource(slot);
                     }
                 } else {
-                    CHECK(false) << "ref-version=" << ver1
-                                 << " unref-version=" << ver2;
+                    //CHECK(false) << "ref-version=" << ver1
+                    //             << " unref-version=" << ver2;
                 }
             } else {
                 // Addressed a free slot.
             }
         } else {
-            CHECK(false) << "Over dereferenced SocketId=" << id;
+            //CHECK(false) << "Over dereferenced SocketId=" << id;
         }
     }
     return -1;    
diff --git a/src/brpc/stream.cpp b/src/brpc/stream.cpp
index e48441e..2e39437 100644
--- a/src/brpc/stream.cpp
+++ b/src/brpc/stream.cpp
@@ -22,6 +22,7 @@
 #include "butil/time.h"
 #include "butil/object_pool.h"
 #include "butil/unique_ptr.h"
+#include "butil/logging.h"
 #include "bthread/unstable.h"
 #include "brpc/log.h"
 #include "brpc/socket.h"
diff --git a/src/brpc/thrift_message.h b/src/brpc/thrift_message.h
index a152b16..c612c73 100644
--- a/src/brpc/thrift_message.h
+++ b/src/brpc/thrift_message.h
@@ -198,7 +198,7 @@ T* ThriftFramedMessage::Cast() {
 
     if (!body.empty()) {
         if (!policy::ReadThriftStruct(body, _raw_instance, field_id)) {
-            LOG(ERROR) << "Fail to parse " << butil::class_name<T>();
+            //LOG(ERROR) << "Fail to parse " << butil::class_name<T>();
         }
     }
     return raw_msg;
diff --git a/src/brpc/trackme.cpp b/src/brpc/trackme.cpp
index b0f56f3..72c1c4a 100644
--- a/src/brpc/trackme.cpp
+++ b/src/brpc/trackme.cpp
@@ -24,6 +24,7 @@
 #include <sys/types.h>
 #include <pwd.h>
 #include "butil/fast_rand.h"
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/channel.h"
 #include "brpc/trackme.pb.h"
diff --git a/src/brpc/ts.cpp b/src/brpc/ts.cpp
index ebefe53..d08574e 100644
--- a/src/brpc/ts.cpp
+++ b/src/brpc/ts.cpp
@@ -34,6 +34,7 @@
 // IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
+#include "butil/logging.h"
 #include "brpc/log.h"
 #include "brpc/policy/rtmp_protocol.h"
 #include "brpc/ts.h"
diff --git a/src/brpc/uri.cpp b/src/brpc/uri.cpp
index 15ca9e9..5035d75 100644
--- a/src/brpc/uri.cpp
+++ b/src/brpc/uri.cpp
@@ -19,7 +19,7 @@
 #include "brpc/log.h"
 #include "brpc/details/http_parser.h"      // http_parser_parse_url
 #include "brpc/uri.h"                      // URI
-
+#include "butil/logging.h"
 
 namespace brpc {
 
diff --git a/src/bthread/countdown_event.cpp b/src/bthread/countdown_event.cpp
index 3d0d652..fb504cf 100644
--- a/src/bthread/countdown_event.cpp
+++ b/src/bthread/countdown_event.cpp
@@ -22,6 +22,7 @@
 #include "butil/atomicops.h"     // butil::atomic<int>
 #include "bthread/butex.h"
 #include "bthread/countdown_event.h"
+#include "butil/logging.h"
 
 namespace bthread {
 
diff --git a/src/bthread/execution_queue.cpp b/src/bthread/execution_queue.cpp
index 569698b..590e20f 100644
--- a/src/bthread/execution_queue.cpp
+++ b/src/bthread/execution_queue.cpp
@@ -24,6 +24,7 @@
 #include "butil/memory/singleton_on_pthread_once.h"
 #include "butil/object_pool.h"           // butil::get_object
 #include "butil/resource_pool.h"         // butil::get_resource
+#include "butil/logging.h"
 
 namespace bthread {
 
diff --git a/src/bthread/execution_queue_inl.h b/src/bthread/execution_queue_inl.h
index 7911db6..e5f643a 100644
--- a/src/bthread/execution_queue_inl.h
+++ b/src/bthread/execution_queue_inl.h
@@ -25,7 +25,7 @@
 #include "butil/atomicops.h"             // butil::atomic
 #include "butil/macros.h"                // BAIDU_CACHELINE_ALIGNMENT
 #include "butil/memory/scoped_ptr.h"     // butil::scoped_ptr
-#include "butil/logging.h"               // LOG
+//#include "butil/logging.h"               // LOG
 #include "butil/time.h"                  // butil::cpuwide_time_ns
 #include "bvar/bvar.h"                  // bvar::Adder
 #include "bthread/butex.h"              // butex_construct
@@ -99,18 +99,18 @@ struct BAIDU_CACHELINE_ALIGNMENT TaskNode {
     void clear_before_return(clear_task_mem clear_func) {
         if (!stop_task) {
             clear_func(this);
-            CHECK(iterated);
+            //CHECK(iterated);
         }
         q = NULL;
         std::unique_lock<butil::Mutex> lck(mutex);
         ++version;
-        const int saved_status = status;
+        //const int saved_status = status;
         status = UNEXECUTED;
         lck.unlock();
-        CHECK_NE(saved_status, UNEXECUTED);
-        LOG_IF(WARNING, saved_status == EXECUTING) 
-                << "Return a executing node, did you return before "
-                   "iterator reached the end?";
+        //CHECK_NE(saved_status, UNEXECUTED);
+        //LOG_IF(WARNING, saved_status == EXECUTING) 
+        //        << "Return a executing node, did you return before "
+        //           "iterator reached the end?";
     }
 
     static TaskNode* const UNCONNECTED;
@@ -433,7 +433,7 @@ inline bool ExecutionQueueBase::_more_tasks(
         TaskNode* old_head, TaskNode** new_tail, 
         bool has_uniterated) {
 
-    CHECK(old_head->next == NULL);
+    //CHECK(old_head->next == NULL);
     // Try to set _head to NULL to mark that the execute is done.
     TaskNode* new_head = old_head;
     TaskNode* desired = NULL;
@@ -447,7 +447,7 @@ inline bool ExecutionQueueBase::_more_tasks(
         // No one added new tasks.
         return return_when_no_more;
     }
-    CHECK_NE(new_head, old_head);
+    //CHECK_NE(new_head, old_head);
     // Above acquire fence pairs release fence of exchange in Write() to make
     // sure that we see all fields of requests set.
 
@@ -467,7 +467,7 @@ inline bool ExecutionQueueBase::_more_tasks(
         p->next = tail;
         tail = p;
         p = saved_next;
-        CHECK(p != NULL);
+        //CHECK(p != NULL);
     } while (p != old_head);
 
     // Link old list with new list.
@@ -526,10 +526,10 @@ inline int ExecutionQueueBase::dereference() {
             }
             return 0;
         }
-        LOG(FATAL) << "Invalid id=" << id;
+        //LOG(FATAL) << "Invalid id=" << id;
         return -1;
     }
-    LOG(FATAL) << "Over dereferenced id=" << id;
+    //LOG(FATAL) << "Over dereferenced id=" << id;
     return -1;
 }
 
diff --git a/src/bthread/key.cpp b/src/bthread/key.cpp
index a4a0840..55c1d39 100644
--- a/src/bthread/key.cpp
+++ b/src/bthread/key.cpp
@@ -25,6 +25,7 @@
 #include "bvar/passive_status.h"
 #include "bthread/errno.h"                       // EAGAIN
 #include "bthread/task_group.h"                  // TaskGroup
+#include "butil/logging.h"
 
 // Implement bthread_key_t related functions
 
diff --git a/src/bthread/mutex.h b/src/bthread/mutex.h
index 257f179..cdcd91e 100644
--- a/src/bthread/mutex.h
+++ b/src/bthread/mutex.h
@@ -51,7 +51,7 @@ public:
             throw std::system_error(std::error_code(ec, std::system_category()), "Mutex constructor failed");
         }
     }
-    ~Mutex() { CHECK_EQ(0, bthread_mutex_destroy(&_mutex)); }
+    ~Mutex() { bthread_mutex_destroy(&_mutex); }
     native_handler_type native_handler() { return &_mutex; }
     void lock() {
         int ec = bthread_mutex_lock(&_mutex);
@@ -98,7 +98,7 @@ public:
 #if !defined(NDEBUG)
         const int rc = bthread_mutex_lock(_pmutex);
         if (rc) {
-            LOG(FATAL) << "Fail to lock bthread_mutex_t=" << _pmutex << ", " << berror(rc);
+            //LOG(FATAL) << "Fail to lock bthread_mutex_t=" << _pmutex << ", " << berror(rc);
             _pmutex = NULL;
         }
 #else
@@ -148,11 +148,11 @@ public:
 
     void lock() {
         if (!_mutex) {
-            CHECK(false) << "Invalid operation";
+            //CHECK(false) << "Invalid operation";
             return;
         }
         if (_owns_lock) {
-            CHECK(false) << "Detected deadlock issue";     
+            //CHECK(false) << "Detected deadlock issue";     
             return;
         }
         bthread_mutex_lock(_mutex);
@@ -161,11 +161,11 @@ public:
 
     bool try_lock() {
         if (!_mutex) {
-            CHECK(false) << "Invalid operation";
+            //CHECK(false) << "Invalid operation";
             return false;
         }
         if (_owns_lock) {
-            CHECK(false) << "Detected deadlock issue";     
+            //CHECK(false) << "Detected deadlock issue";     
             return false;
         }
         _owns_lock = !bthread_mutex_trylock(_mutex);
@@ -174,7 +174,7 @@ public:
 
     void unlock() {
         if (!_owns_lock) {
-            CHECK(false) << "Invalid operation";
+            //CHECK(false) << "Invalid operation";
             return;
         }
         if (_mutex) {
diff --git a/src/bthread/stack.cpp b/src/bthread/stack.cpp
index 43e57ef..2154fc0 100644
--- a/src/bthread/stack.cpp
+++ b/src/bthread/stack.cpp
@@ -30,6 +30,7 @@
 #include "bvar/passive_status.h"
 #include "bthread/types.h"                        // BTHREAD_STACKTYPE_*
 #include "bthread/stack.h"
+#include "butil/logging.h"
 
 DEFINE_int32(stack_size_small, 32768, "size of small stacks");
 DEFINE_int32(stack_size_normal, 1048576, "size of normal stacks");
diff --git a/src/bthread/task_group.cpp b/src/bthread/task_group.cpp
index d561c57..4c81d57 100644
--- a/src/bthread/task_group.cpp
+++ b/src/bthread/task_group.cpp
@@ -36,6 +36,7 @@
 #include "bthread/task_group.h"
 #include "bthread/timer_thread.h"
 #include "bthread/errno.h"
+#include "butil/logging.h"
 
 namespace bthread {
 
diff --git a/src/bthread/task_group_inl.h b/src/bthread/task_group_inl.h
index d48ceaa..b329554 100644
--- a/src/bthread/task_group_inl.h
+++ b/src/bthread/task_group_inl.h
@@ -88,7 +88,7 @@ inline void TaskGroup::push_rq(bthread_t tid) {
         //   are busy at creating bthreads (proved by test_input_messenger in
         //   brpc)
         flush_nosignal_tasks();
-        LOG_EVERY_SECOND(ERROR) << "_rq is full, capacity=" << _rq.capacity();
+        //LOG_EVERY_SECOND(ERROR) << "_rq is full, capacity=" << _rq.capacity();
         // TODO(gejun): May cause deadlock when all workers are spinning here.
         // A better solution is to pop and run existing bthreads, however which
         // make set_remained()-callbacks do context switches and need extensive
diff --git a/src/bthread/types.h b/src/bthread/types.h
index 8263ea9..3cccb60 100644
--- a/src/bthread/types.h
+++ b/src/bthread/types.h
@@ -23,8 +23,9 @@
 #define BTHREAD_TYPES_H
 
 #include <stdint.h>                            // uint64_t
+#include <iostream>
 #if defined(__cplusplus)
-#include "butil/logging.h"                      // CHECK
+//#include "butil/logging.h"                      // CHECK
 #endif
 
 typedef uint64_t bthread_t;
@@ -99,7 +100,7 @@ typedef struct bthread_attr_t {
         keytable_pool = NULL;
     }
     bthread_attr_t operator|(unsigned other_flags) const {
-        CHECK(!(other_flags & 7)) << "flags=" << other_flags;
+        //CHECK(!(other_flags & 7)) << "flags=" << other_flags;
         bthread_attr_t tmp = *this;
         tmp.flags |= (other_flags & ~(unsigned)7u);
         return tmp;
diff --git a/src/bthread/work_stealing_queue.h b/src/bthread/work_stealing_queue.h
index 3750ac5..79932f6 100644
--- a/src/bthread/work_stealing_queue.h
+++ b/src/bthread/work_stealing_queue.h
@@ -24,7 +24,7 @@
 
 #include "butil/macros.h"
 #include "butil/atomicops.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 
 namespace bthread {
 
@@ -45,16 +45,16 @@ public:
 
     int init(size_t capacity) {
         if (_capacity != 0) {
-            LOG(ERROR) << "Already initialized";
+            //LOG(ERROR) << "Already initialized";
             return -1;
         }
         if (capacity == 0) {
-            LOG(ERROR) << "Invalid capacity=" << capacity;
+            //LOG(ERROR) << "Invalid capacity=" << capacity;
             return -1;
         }
         if (capacity & (capacity - 1)) {
-            LOG(ERROR) << "Invalid capacity=" << capacity
-                       << " which must be power of 2";
+            //LOG(ERROR) << "Invalid capacity=" << capacity
+            //           << " which must be power of 2";
             return -1;
         }
         _buffer = new(std::nothrow) T[capacity];
diff --git a/src/butil/bits.h b/src/butil/bits.h
index 530e479..b9a6f44 100644
--- a/src/butil/bits.h
+++ b/src/butil/bits.h
@@ -8,7 +8,7 @@
 #define BUTIL_BITS_H_
 
 #include "butil/basictypes.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 
 namespace butil {
 namespace bits {
@@ -27,7 +27,7 @@ inline int Log2Floor(uint32_t n) {
       log += shift;
     }
   }
-  DCHECK_EQ(value, 1u);
+  //DCHECK_EQ(value, 1u);
   return log;
 }
 
diff --git a/src/butil/cancelable_callback.h b/src/butil/cancelable_callback.h
index f2d0465..b4e1f76 100644
--- a/src/butil/cancelable_callback.h
+++ b/src/butil/cancelable_callback.h
@@ -47,7 +47,7 @@
 #include "butil/callback.h"
 #include "butil/callback_internal.h"
 #include "butil/compiler_specific.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/memory/weak_ptr.h"
 
 namespace butil {
@@ -64,7 +64,7 @@ class CancelableCallback<void(void)> {
   explicit CancelableCallback(const butil::Callback<void(void)>& callback)
       : weak_factory_(this),
         callback_(callback) {
-    DCHECK(!callback.is_null());
+    //DCHECK(!callback.is_null());
     InitializeForwarder();
   }
 
@@ -85,7 +85,7 @@ class CancelableCallback<void(void)> {
   // Sets |callback| as the closure that may be cancelled. |callback| may not
   // be null. Outstanding and any previously wrapped callbacks are cancelled.
   void Reset(const butil::Callback<void(void)>& callback) {
-    DCHECK(!callback.is_null());
+    //DCHECK(!callback.is_null());
 
     // Outstanding tasks (e.g., posted to a message loop) must not be called.
     Cancel();
@@ -134,7 +134,7 @@ class CancelableCallback<void(A1)> {
   explicit CancelableCallback(const butil::Callback<void(A1)>& callback)
       : weak_factory_(this),
         callback_(callback) {
-    DCHECK(!callback.is_null());
+    //DCHECK(!callback.is_null());
     InitializeForwarder();
   }
 
@@ -155,7 +155,7 @@ class CancelableCallback<void(A1)> {
   // Sets |callback| as the closure that may be cancelled. |callback| may not
   // be null. Outstanding and any previously wrapped callbacks are cancelled.
   void Reset(const butil::Callback<void(A1)>& callback) {
-    DCHECK(!callback.is_null());
+    //DCHECK(!callback.is_null());
 
     // Outstanding tasks (e.g., posted to a message loop) must not be called.
     Cancel();
@@ -204,7 +204,7 @@ class CancelableCallback<void(A1, A2)> {
   explicit CancelableCallback(const butil::Callback<void(A1, A2)>& callback)
       : weak_factory_(this),
         callback_(callback) {
-    DCHECK(!callback.is_null());
+    //DCHECK(!callback.is_null());
     InitializeForwarder();
   }
 
@@ -225,7 +225,7 @@ class CancelableCallback<void(A1, A2)> {
   // Sets |callback| as the closure that may be cancelled. |callback| may not
   // be null. Outstanding and any previously wrapped callbacks are cancelled.
   void Reset(const butil::Callback<void(A1, A2)>& callback) {
-    DCHECK(!callback.is_null());
+    //DCHECK(!callback.is_null());
 
     // Outstanding tasks (e.g., posted to a message loop) must not be called.
     Cancel();
diff --git a/src/butil/containers/bounded_queue.h b/src/butil/containers/bounded_queue.h
index 55f06e1..842c04b 100644
--- a/src/butil/containers/bounded_queue.h
+++ b/src/butil/containers/bounded_queue.h
@@ -26,7 +26,7 @@
 #define BUTIL_BOUNDED_QUEUE_H
 
 #include "butil/macros.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 
 namespace butil {
 
@@ -64,7 +64,7 @@ public:
         , _start(0)
         , _ownership(ownership)
         , _items(mem) {
-        DCHECK(_items);
+        //DCHECK(_items);
     };
     
     // Construct a queue with the given capacity.
@@ -76,7 +76,7 @@ public:
         , _start(0)
         , _ownership(OWNS_STORAGE)
         , _items(malloc(capacity * sizeof(T))) {
-        DCHECK(_items);
+        //DCHECK(_items);
     };
     
     BoundedQueue()
diff --git a/src/butil/containers/doubly_buffered_data.h b/src/butil/containers/doubly_buffered_data.h
index 93ba342..9822dbb 100644
--- a/src/butil/containers/doubly_buffered_data.h
+++ b/src/butil/containers/doubly_buffered_data.h
@@ -24,7 +24,7 @@
 #include <pthread.h>
 #include "butil/scoped_lock.h"
 #include "butil/thread_local.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/macros.h"
 #include "butil/type_traits.h"
 #include "butil/errno.h"
@@ -282,7 +282,7 @@ DoublyBufferedData<T, TLS>::DoublyBufferedData()
     const int rc = pthread_key_create(&_wrapper_key,
                                       butil::delete_object<Wrapper>);
     if (rc != 0) {
-        LOG(FATAL) << "Fail to pthread_key_create: " << berror(rc);
+        //LOG(FATAL) << "Fail to pthread_key_create: " << berror(rc);
     } else {
         _created_key = true;
     }
@@ -374,7 +374,7 @@ size_t DoublyBufferedData<T, TLS>::Modify(Fn& fn) {
     }
 
     const size_t ret2 = fn(_data[bg_index]);
-    CHECK_EQ(ret2, ret) << "index=" << _index.load(butil::memory_order_relaxed);
+    //CHECK_EQ(ret2, ret) << "index=" << _index.load(butil::memory_order_relaxed);
     return ret2;
 }
 
diff --git a/src/butil/containers/flat_map.h b/src/butil/containers/flat_map.h
index ef89aa6..ecb5bec 100644
--- a/src/butil/containers/flat_map.h
+++ b/src/butil/containers/flat_map.h
@@ -97,7 +97,7 @@
 #include <functional>
 #include <iostream>                               // std::ostream
 #include "butil/type_traits.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/find_cstr.h"
 #include "butil/single_threaded_pool.h"            // SingleThreadedPool
 #include "butil/containers/hash_tables.h"          // hash<>
diff --git a/src/butil/containers/flat_map_inl.h b/src/butil/containers/flat_map_inl.h
index ef08d7b..573087f 100644
--- a/src/butil/containers/flat_map_inl.h
+++ b/src/butil/containers/flat_map_inl.h
@@ -277,14 +277,14 @@ FlatMap<_K, _T, _H, _E, _S>::operator=(const FlatMap<_K, _T, _H, _E, _S>& rhs) {
         // note: need an extra bucket to let iterator know where buckets end
         _buckets = (Bucket*)malloc(sizeof(Bucket) * (_nbucket + 1/*note*/));
         if (NULL == _buckets) {
-            LOG(ERROR) << "Fail to new _buckets";
+            //LOG(ERROR) << "Fail to new _buckets";
             return;
         }
         if (_S) {
             free(_thumbnail);
             _thumbnail = bit_array_malloc(_nbucket);
             if (NULL == _thumbnail) {
-                LOG(ERROR) << "Fail to new _thumbnail";
+                //LOG(ERROR) << "Fail to new _thumbnail";
                 return;
             }
             bit_array_clear(_thumbnail, _nbucket);
@@ -323,11 +323,11 @@ FlatMap<_K, _T, _H, _E, _S>::operator=(const FlatMap<_K, _T, _H, _E, _S>& rhs) {
 template <typename _K, typename _T, typename _H, typename _E, bool _S>
 int FlatMap<_K, _T, _H, _E, _S>::init(size_t nbucket, u_int load_factor) {
     if (initialized()) {
-        LOG(ERROR) << "Already initialized";
+        //LOG(ERROR) << "Already initialized";
         return -1;
     }
     if (load_factor < 10 || load_factor > 100) {
-        LOG(ERROR) << "Invalid load_factor=" << load_factor;
+        //LOG(ERROR) << "Invalid load_factor=" << load_factor;
         return -1;
     }
     _size = 0;
@@ -336,7 +336,7 @@ int FlatMap<_K, _T, _H, _E, _S>::init(size_t nbucket, u_int load_factor) {
                                 
     _buckets = (Bucket*)malloc(sizeof(Bucket) * (_nbucket + 1));
     if (NULL == _buckets) {
-        LOG(ERROR) << "Fail to new _buckets";
+        //LOG(ERROR) << "Fail to new _buckets";
         return -1;
     }
     for (size_t i = 0; i < _nbucket; ++i) {
@@ -347,7 +347,7 @@ int FlatMap<_K, _T, _H, _E, _S>::init(size_t nbucket, u_int load_factor) {
     if (_S) {
         _thumbnail = bit_array_malloc(_nbucket);
         if (NULL == _thumbnail) {
-            LOG(ERROR) << "Fail to new _thumbnail";
+            //LOG(ERROR) << "Fail to new _thumbnail";
             return -1;
         }
         bit_array_clear(_thumbnail, _nbucket);
@@ -600,7 +600,7 @@ bool FlatMap<_K, _T, _H, _E, _S>::resize(size_t nbucket2) {
 
     FlatMap new_map;
     if (new_map.init(nbucket2, _load_factor) != 0) {
-        LOG(ERROR) << "Fail to init new_map, nbucket=" << nbucket2;
+        //LOG(ERROR) << "Fail to init new_map, nbucket=" << nbucket2;
         return false;
     }
     for (iterator it = begin(); it != end(); ++it) {
diff --git a/src/butil/containers/mru_cache.h b/src/butil/containers/mru_cache.h
index e2bbef7..3102a56 100644
--- a/src/butil/containers/mru_cache.h
+++ b/src/butil/containers/mru_cache.h
@@ -22,7 +22,7 @@
 
 #include "butil/basictypes.h"
 #include "butil/containers/hash_tables.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 
 namespace butil {
 
@@ -174,7 +174,7 @@ class MRUCacheBase {
   size_type size() const {
     // We don't use ordering_.size() for the return value because
     // (as a linked list) it can be O(n).
-    DCHECK(index_.size() == ordering_.size());
+    //DCHECK(index_.size() == ordering_.size());
     return index_.size();
   }
 
diff --git a/src/butil/containers/scoped_ptr_hash_map.h b/src/butil/containers/scoped_ptr_hash_map.h
index a24e872..bcada67 100644
--- a/src/butil/containers/scoped_ptr_hash_map.h
+++ b/src/butil/containers/scoped_ptr_hash_map.h
@@ -10,7 +10,7 @@
 
 #include "butil/basictypes.h"
 #include "butil/containers/hash_tables.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/memory/scoped_ptr.h"
 #include "butil/stl_util.h"
 
@@ -73,7 +73,7 @@ class ScopedPtrHashMap {
   }
 
   scoped_ptr<Value> take(iterator it) {
-    DCHECK(it != data_.end());
+    //DCHECK(it != data_.end());
     if (it == data_.end())
       return scoped_ptr<Value>();
 
@@ -91,7 +91,7 @@ class ScopedPtrHashMap {
   }
 
   scoped_ptr<Value> take_and_erase(iterator it) {
-    DCHECK(it != data_.end());
+    //DCHECK(it != data_.end());
     if (it == data_.end())
       return scoped_ptr<Value>();
 
diff --git a/src/butil/containers/small_map.h b/src/butil/containers/small_map.h
index 4b619a1..2d13982 100644
--- a/src/butil/containers/small_map.h
+++ b/src/butil/containers/small_map.h
@@ -11,7 +11,7 @@
 
 #include "butil/basictypes.h"
 #include "butil/containers/hash_tables.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/memory/manual_constructor.h"
 
 namespace butil {
@@ -558,11 +558,11 @@ class SmallMap {
   }
 
   inline NormalMap* map() {
-    CHECK(UsingFullMap());
+    //CHECK(UsingFullMap());
     return map_.get();
   }
   inline const NormalMap* map() const {
-    CHECK(UsingFullMap());
+    //CHECK(UsingFullMap());
     return map_.get();
   }
 
diff --git a/src/butil/debug/leak_tracker.h b/src/butil/debug/leak_tracker.h
index 5f584d3..f0a4d6f 100644
--- a/src/butil/debug/leak_tracker.h
+++ b/src/butil/debug/leak_tracker.h
@@ -15,7 +15,7 @@
 #ifdef ENABLE_LEAK_TRACKER
 #include "butil/containers/linked_list.h"
 #include "butil/debug/stack_trace.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #endif  // ENABLE_LEAK_TRACKER
 
 // LeakTracker is a helper to verify that all instances of a class
@@ -93,13 +93,13 @@ class LeakTracker : public LinkNode<LeakTracker<T> > {
         stacktraces[count] = allocation_stack;
 
       ++count;
-      std::ostringstream err;
-      err << "Leaked " << node << " which was allocated by:";
-      allocation_stack.OutputToStream(&err);
-      LOG(ERROR) << err.str();
+      //std::ostringstream err;
+      //err << "Leaked " << node << " which was allocated by:";
+      //allocation_stack.OutputToStream(&err);
+      //LOG(ERROR) << err.str();
     }
 
-    CHECK_EQ(0u, count);
+    //CHECK_EQ(0u, count);
 
     // Hack to keep |stacktraces| and |count| alive (so compiler
     // doesn't optimize it out, and it will appear in mini-dumps).
diff --git a/src/butil/debug/proc_maps_linux.cc b/src/butil/debug/proc_maps_linux.cc
index 4d4888c..7ae694d 100644
--- a/src/butil/debug/proc_maps_linux.cc
+++ b/src/butil/debug/proc_maps_linux.cc
@@ -13,6 +13,7 @@
 #include "butil/file_util.h"
 #include "butil/files/scoped_file.h"
 #include "butil/strings/string_split.h"
+#include "butil/logging.h"
 
 #if defined(OS_ANDROID) && !defined(__LP64__)
 // In 32-bit mode, Bionic's inttypes.h defines PRI/SCNxPTR as an
diff --git a/src/butil/file_util.h b/src/butil/file_util.h
index 4eb164b..765f78a 100644
--- a/src/butil/file_util.h
+++ b/src/butil/file_util.h
@@ -32,7 +32,7 @@
 
 #if defined(OS_POSIX)
 #include "butil/file_descriptor_posix.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/posix/eintr_wrapper.h"
 #endif
 
diff --git a/src/butil/files/dir_reader_linux.h b/src/butil/files/dir_reader_linux.h
index c701546..6e497b4 100644
--- a/src/butil/files/dir_reader_linux.h
+++ b/src/butil/files/dir_reader_linux.h
@@ -11,7 +11,7 @@
 #include <sys/syscall.h>
 #include <unistd.h>
 
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/posix/eintr_wrapper.h"
 
 // See the comments in dir_reader_posix.h about this.
@@ -37,8 +37,8 @@ class DirReaderLinux {
 
   ~DirReaderLinux() {
     if (fd_ >= 0) {
-      if (IGNORE_EINTR(close(fd_)))
-        RAW_LOG(ERROR, "Failed to close directory handle");
+      //if (IGNORE_EINTR(close(fd_)))
+      //  RAW_LOG(ERROR, "Failed to close directory handle");
     }
   }
 
@@ -60,7 +60,7 @@ class DirReaderLinux {
     if (r == 0)
       return false;
     if (r == -1) {
-      DPLOG(FATAL) << "getdents64 returned an error: " << errno;
+      //DPLOG(FATAL) << "getdents64 returned an error: " << errno;
       return false;
     }
     size_ = r;
diff --git a/src/butil/files/dir_reader_unix.h b/src/butil/files/dir_reader_unix.h
index 7e3c1e9..b2aff8e 100644
--- a/src/butil/files/dir_reader_unix.h
+++ b/src/butil/files/dir_reader_unix.h
@@ -26,7 +26,7 @@
 #include <unistd.h>
 #include <dirent.h>
 
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/posix/eintr_wrapper.h"
 
 // See the comments in dir_reader_posix.h about this.
@@ -43,8 +43,8 @@ class DirReaderUnix {
 
   ~DirReaderUnix() {
     if (fd_ >= 0) {
-      if (IGNORE_EINTR(close(fd_)))
-        RAW_LOG(ERROR, "Failed to close directory handle");
+      //if (IGNORE_EINTR(close(fd_)))
+      //  RAW_LOG(ERROR, "Failed to close directory handle");
     }
     if(NULL != dir_){
         closedir(dir_);
diff --git a/src/butil/files/file.cc b/src/butil/files/file.cc
index b3ce118..9134347 100644
--- a/src/butil/files/file.cc
+++ b/src/butil/files/file.cc
@@ -37,7 +37,7 @@ File::File(PlatformFile platform_file)
       created_(false),
       async_(false) {
 #if defined(OS_POSIX)
-  DCHECK_GE(platform_file, -1);
+  //DCHECK_GE(platform_file, -1);
 #endif
 }
 
@@ -120,7 +120,7 @@ std::string File::ErrorToString(Error error) {
       break;
   }
 
-  NOTREACHED();
+  //NOTREACHED();
   return "";
 }
 
diff --git a/src/butil/files/scoped_file.h b/src/butil/files/scoped_file.h
index 4d4d6ea..4063655 100644
--- a/src/butil/files/scoped_file.h
+++ b/src/butil/files/scoped_file.h
@@ -8,7 +8,7 @@
 #include <stdio.h>
 
 #include "butil/base_export.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/memory/scoped_ptr.h"
 #include "butil/scoped_generic.h"
 #include "butil/build_config.h"
diff --git a/src/butil/hash.h b/src/butil/hash.h
index 69468a9..b838ad7 100644
--- a/src/butil/hash.h
+++ b/src/butil/hash.h
@@ -10,7 +10,7 @@
 
 #include "butil/base_export.h"
 #include "butil/basictypes.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 
 namespace butil {
 
@@ -21,7 +21,7 @@ BUTIL_EXPORT uint32_t SuperFastHash(const char* data, int len);
 // WARNING: This hash function should not be used for any cryptographic purpose.
 inline uint32_t Hash(const char* data, size_t length) {
   if (length > static_cast<size_t>(std::numeric_limits<int>::max())) {
-    NOTREACHED();
+    //NOTREACHED();
     return 0;
   }
   return SuperFastHash(data, static_cast<int>(length));
diff --git a/src/butil/lazy_instance.h b/src/butil/lazy_instance.h
index 38b48a8..954c7af 100644
--- a/src/butil/lazy_instance.h
+++ b/src/butil/lazy_instance.h
@@ -41,7 +41,7 @@
 #include "butil/base_export.h"
 #include "butil/basictypes.h"
 #include "butil/debug/leak_annotations.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/memory/aligned_memory.h"
 #include "butil/third_party/dynamic_annotations/dynamic_annotations.h"
 #include "butil/threading/thread_restrictions.h"
@@ -62,10 +62,10 @@ struct DefaultLazyInstanceTraits {
 #endif
 
   static Type* New(void* instance) {
-    DCHECK_EQ(reinterpret_cast<uintptr_t>(instance) & (ALIGNOF(Type) - 1), 0u)
-        << ": Bad boy, the buffer passed to placement new is not aligned!\n"
-        "This may break some stuff like SSE-based optimizations assuming the "
-        "<Type> objects are word aligned.";
+    // DCHECK_EQ(reinterpret_cast<uintptr_t>(instance) & (ALIGNOF(Type) - 1), 0u)
+    //    << ": Bad boy, the buffer passed to placement new is not aligned!\n"
+    //    "This may break some stuff like SSE-based optimizations assuming the "
+    //    "<Type> objects are word aligned.";
     // Use placement new to initialize our instance in our preallocated space.
     // The parenthesis is very important here to force POD type initialization.
     return new (instance) Type();
diff --git a/src/butil/memory/linked_ptr.h b/src/butil/memory/linked_ptr.h
index 5773b17..b8a7764 100644
--- a/src/butil/memory/linked_ptr.h
+++ b/src/butil/memory/linked_ptr.h
@@ -37,7 +37,7 @@
 #ifndef BUTIL_MEMORY_LINKED_PTR_H_
 #define BUTIL_MEMORY_LINKED_PTR_H_
 
-#include "butil/logging.h"  // for CHECK macros
+//#include "butil/logging.h"  // for CHECK macros
 
 // This is used internally by all instances of linked_ptr<>.  It needs to be
 // a non-template class because different types of linked_ptr<> can refer to
@@ -87,7 +87,7 @@ class linked_ptr {
   template <typename U> linked_ptr(linked_ptr<U> const& ptr) { copy(&ptr); }
 
   linked_ptr(linked_ptr const& ptr) {
-    DCHECK_NE(&ptr, this);
+    //DCHECK_NE(&ptr, this);
     copy(&ptr);
   }
 
@@ -118,7 +118,7 @@ class linked_ptr {
   // Sole ownership by this linked_ptr object is required.
   T* release() {
     bool last = link_.depart();
-    CHECK(last);
+    //CHECK(last);
     T* v = value_;
     value_ = NULL;
     return v;
diff --git a/src/butil/memory/ref_counted.h b/src/butil/memory/ref_counted.h
index 82704d8..12aa98a 100644
--- a/src/butil/memory/ref_counted.h
+++ b/src/butil/memory/ref_counted.h
@@ -11,7 +11,7 @@
 #include "butil/base_export.h"
 #include "butil/compiler_specific.h"
 #ifndef NDEBUG
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #endif
 #include "butil/threading/thread_collision_warner.h"
 
@@ -32,7 +32,7 @@ class BUTIL_EXPORT RefCountedBase {
 
   ~RefCountedBase() {
   #ifndef NDEBUG
-    DCHECK(in_dtor_) << "RefCounted object deleted without calling Release()";
+    //DCHECK(in_dtor_) << "RefCounted object deleted without calling Release()";
   #endif
   }
 
@@ -43,7 +43,7 @@ class BUTIL_EXPORT RefCountedBase {
     // without release it.
     // DFAKE_SCOPED_LOCK_THREAD_LOCKED(add_release_);
   #ifndef NDEBUG
-    DCHECK(!in_dtor_);
+    //DCHECK(!in_dtor_);
   #endif
     ++ref_count_;
   }
@@ -55,7 +55,7 @@ class BUTIL_EXPORT RefCountedBase {
     // without release it.
     // DFAKE_SCOPED_LOCK_THREAD_LOCKED(add_release_);
   #ifndef NDEBUG
-    DCHECK(!in_dtor_);
+    //DCHECK(!in_dtor_);
   #endif
     if (--ref_count_ == 0) {
   #ifndef NDEBUG
diff --git a/src/butil/memory/scoped_vector.h b/src/butil/memory/scoped_vector.h
index f1a3474..0b7efe0 100644
--- a/src/butil/memory/scoped_vector.h
+++ b/src/butil/memory/scoped_vector.h
@@ -8,7 +8,7 @@
 #include <vector>
 
 #include "butil/basictypes.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/move.h"
 #include "butil/stl_util.h"
 
@@ -68,7 +68,7 @@ class ScopedVector {
   void push_back(T* elem) { v_.push_back(elem); }
 
   void pop_back() {
-    DCHECK(!empty());
+    //DCHECK(!empty());
     delete v_.back();
     v_.pop_back();
   }
diff --git a/src/butil/memory/weak_ptr.h b/src/butil/memory/weak_ptr.h
index fd65bc9..c5b2057 100644
--- a/src/butil/memory/weak_ptr.h
+++ b/src/butil/memory/weak_ptr.h
@@ -65,7 +65,7 @@
 
 #include "butil/basictypes.h"
 #include "butil/base_export.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/memory/ref_counted.h"
 #include "butil/type_traits.h"
 
@@ -201,11 +201,11 @@ class WeakPtr : public internal::WeakPtrBase {
   T* get() const { return ref_.is_valid() ? ptr_ : NULL; }
 
   T& operator*() const {
-    DCHECK(get() != NULL);
+    //DCHECK(get() != NULL);
     return *get();
   }
   T* operator->() const {
-    DCHECK(get() != NULL);
+    //DCHECK(get() != NULL);
     return get();
   }
 
@@ -264,19 +264,19 @@ class WeakPtrFactory {
   }
 
   WeakPtr<T> GetWeakPtr() {
-    DCHECK(ptr_);
+    //DCHECK(ptr_);
     return WeakPtr<T>(weak_reference_owner_.GetRef(), ptr_);
   }
 
   // Call this method to invalidate all existing weak pointers.
   void InvalidateWeakPtrs() {
-    DCHECK(ptr_);
+    //DCHECK(ptr_);
     weak_reference_owner_.Invalidate();
   }
 
   // Call this method to determine if any weak pointers exist.
   bool HasWeakPtrs() const {
-    DCHECK(ptr_);
+    //DCHECK(ptr_);
     return weak_reference_owner_.HasRefs();
   }
 
diff --git a/src/butil/numerics/safe_conversions.h b/src/butil/numerics/safe_conversions.h
index 677aa4a..48344d6 100644
--- a/src/butil/numerics/safe_conversions.h
+++ b/src/butil/numerics/safe_conversions.h
@@ -7,7 +7,7 @@
 
 #include <limits>
 
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/numerics/safe_conversions_impl.h"
 
 namespace butil {
@@ -25,7 +25,7 @@ inline bool IsValueInRangeForNumericType(Src value) {
 // overflow or underflow. NaN source will always trigger a CHECK.
 template <typename Dst, typename Src>
 inline Dst checked_cast(Src value) {
-  CHECK(IsValueInRangeForNumericType<Dst>(value));
+  //CHECK(IsValueInRangeForNumericType<Dst>(value));
   return static_cast<Dst>(value);
 }
 
@@ -50,7 +50,7 @@ inline Dst saturated_cast(Src value) {
 
     // Should fail only on attempting to assign NaN to a saturated integer.
     case internal::RANGE_INVALID:
-      CHECK(false);
+      //CHECK(false);
       return std::numeric_limits<Dst>::max();
   }
 
diff --git a/src/butil/observer_list.h b/src/butil/observer_list.h
index 8f0dd3b..b649efb 100644
--- a/src/butil/observer_list.h
+++ b/src/butil/observer_list.h
@@ -10,7 +10,7 @@
 #include <vector>
 
 #include "butil/basictypes.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/memory/weak_ptr.h"
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -194,7 +194,7 @@ class ObserverList : public ObserverListBase<ObserverType> {
     // When check_empty is true, assert that the list is empty on destruction.
     if (check_empty) {
       ObserverListBase<ObserverType>::Compact();
-      DCHECK_EQ(ObserverListBase<ObserverType>::size(), 0U);
+      //DCHECK_EQ(ObserverListBase<ObserverType>::size(), 0U);
     }
   }
 
diff --git a/src/butil/scoped_lock.h b/src/butil/scoped_lock.h
index 45f5230..f6cfa44 100644
--- a/src/butil/scoped_lock.h
+++ b/src/butil/scoped_lock.h
@@ -26,7 +26,7 @@
 
 #include "butil/synchronization/lock.h"
 #include "butil/macros.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 #include "butil/errno.h"
 
 #if !defined(BUTIL_CXX11_ENABLED)
@@ -100,7 +100,7 @@ public:
 
     void lock() {
         if (_owns_lock) {
-            CHECK(false) << "Detected deadlock issue";     
+            //CHECK(false) << "Detected deadlock issue";     
             return;
         }
         _owns_lock = true;
@@ -109,7 +109,7 @@ public:
 
     bool try_lock() {
         if (_owns_lock) {
-            CHECK(false) << "Detected deadlock issue";     
+            //CHECK(false) << "Detected deadlock issue";     
             return false;
         }
         _owns_lock = _mutex->try_lock();
@@ -118,7 +118,7 @@ public:
 
     void unlock() {
         if (!_owns_lock) {
-            CHECK(false) << "Invalid operation";
+            //CHECK(false) << "Invalid operation";
             return;
         }
         _mutex->unlock();
@@ -156,7 +156,7 @@ public:
 #if !defined(NDEBUG)
         const int rc = pthread_mutex_lock(_pmutex);
         if (rc) {
-            LOG(FATAL) << "Fail to lock pthread_mutex_t=" << _pmutex << ", " << berror(rc);
+            //LOG(FATAL) << "Fail to lock pthread_mutex_t=" << _pmutex << ", " << berror(rc);
             _pmutex = NULL;
         }
 #else
@@ -185,7 +185,7 @@ public:
 #if !defined(NDEBUG)
         const int rc = pthread_spin_lock(_pspin);
         if (rc) {
-            LOG(FATAL) << "Fail to lock pthread_spinlock_t=" << _pspin << ", " << berror(rc);
+            //LOG(FATAL) << "Fail to lock pthread_spinlock_t=" << _pspin << ", " << berror(rc);
             _pspin = NULL;
         }
 #else
@@ -235,13 +235,13 @@ public:
 
     void lock() {
         if (_owns_lock) {
-            CHECK(false) << "Detected deadlock issue";     
+            //CHECK(false) << "Detected deadlock issue";     
             return;
         }
 #if !defined(NDEBUG)
         const int rc = pthread_mutex_lock(_mutex);
         if (rc) {
-            LOG(FATAL) << "Fail to lock pthread_mutex=" << _mutex << ", " << berror(rc);
+            //LOG(FATAL) << "Fail to lock pthread_mutex=" << _mutex << ", " << berror(rc);
             return;
         }
         _owns_lock = true;
@@ -253,7 +253,7 @@ public:
 
     bool try_lock() {
         if (_owns_lock) {
-            CHECK(false) << "Detected deadlock issue";     
+            //CHECK(false) << "Detected deadlock issue";     
             return false;
         }
         _owns_lock = !pthread_mutex_trylock(_mutex);
@@ -262,7 +262,7 @@ public:
 
     void unlock() {
         if (!_owns_lock) {
-            CHECK(false) << "Invalid operation";
+            //CHECK(false) << "Invalid operation";
             return;
         }
         pthread_mutex_unlock(_mutex);
@@ -317,13 +317,13 @@ public:
 
     void lock() {
         if (_owns_lock) {
-            CHECK(false) << "Detected deadlock issue";     
+            //CHECK(false) << "Detected deadlock issue";     
             return;
         }
 #if !defined(NDEBUG)
         const int rc = pthread_spin_lock(_mutex);
         if (rc) {
-            LOG(FATAL) << "Fail to lock pthread_spinlock=" << _mutex << ", " << berror(rc);
+            //LOG(FATAL) << "Fail to lock pthread_spinlock=" << _mutex << ", " << berror(rc);
             return;
         }
         _owns_lock = true;
@@ -335,7 +335,7 @@ public:
 
     bool try_lock() {
         if (_owns_lock) {
-            CHECK(false) << "Detected deadlock issue";     
+            //CHECK(false) << "Detected deadlock issue";     
             return false;
         }
         _owns_lock = !pthread_spin_trylock(_mutex);
@@ -344,7 +344,7 @@ public:
 
     void unlock() {
         if (!_owns_lock) {
-            CHECK(false) << "Invalid operation";
+            //CHECK(false) << "Invalid operation";
             return;
         }
         pthread_spin_unlock(_mutex);
@@ -381,11 +381,11 @@ namespace butil {
 // Lock both lck1 and lck2 without the dead lock issue
 template <typename Mutex1, typename Mutex2>
 void double_lock(std::unique_lock<Mutex1> &lck1, std::unique_lock<Mutex2> &lck2) {
-    DCHECK(!lck1.owns_lock());
-    DCHECK(!lck2.owns_lock());
+    //DCHECK(!lck1.owns_lock());
+    //DCHECK(!lck2.owns_lock());
     volatile void* const ptr1 = lck1.mutex();
     volatile void* const ptr2 = lck2.mutex();
-    DCHECK_NE(ptr1, ptr2);
+    //DCHECK_NE(ptr1, ptr2);
     if (ptr1 < ptr2) {
         lck1.lock();
         lck2.lock();
diff --git a/src/butil/stl_util.h b/src/butil/stl_util.h
index 19b638f..fa3e29f 100644
--- a/src/butil/stl_util.h
+++ b/src/butil/stl_util.h
@@ -13,7 +13,7 @@
 #include <string>
 #include <vector>
 
-#include "butil/logging.h"
+//#include "butil/logging.h"
 
 namespace butil {
 
@@ -211,8 +211,8 @@ bool STLIsSorted(const Container& cont) {
 // Returns a new ResultType containing the difference of two sorted containers.
 template <typename ResultType, typename Arg1, typename Arg2>
 ResultType STLSetDifference(const Arg1& a1, const Arg2& a2) {
-  DCHECK(STLIsSorted(a1));
-  DCHECK(STLIsSorted(a2));
+  //DCHECK(STLIsSorted(a1));
+  //DCHECK(STLIsSorted(a2));
   ResultType difference;
   std::set_difference(a1.begin(), a1.end(),
                       a2.begin(), a2.end(),
@@ -223,8 +223,8 @@ ResultType STLSetDifference(const Arg1& a1, const Arg2& a2) {
 // Returns a new ResultType containing the union of two sorted containers.
 template <typename ResultType, typename Arg1, typename Arg2>
 ResultType STLSetUnion(const Arg1& a1, const Arg2& a2) {
-  DCHECK(STLIsSorted(a1));
-  DCHECK(STLIsSorted(a2));
+  //DCHECK(STLIsSorted(a1));
+  //DCHECK(STLIsSorted(a2));
   ResultType result;
   std::set_union(a1.begin(), a1.end(),
                  a2.begin(), a2.end(),
@@ -236,8 +236,8 @@ ResultType STLSetUnion(const Arg1& a1, const Arg2& a2) {
 // containers.
 template <typename ResultType, typename Arg1, typename Arg2>
 ResultType STLSetIntersection(const Arg1& a1, const Arg2& a2) {
-  DCHECK(STLIsSorted(a1));
-  DCHECK(STLIsSorted(a2));
+  //DCHECK(STLIsSorted(a1));
+  //DCHECK(STLIsSorted(a2));
   ResultType result;
   std::set_intersection(a1.begin(), a1.end(),
                         a2.begin(), a2.end(),
@@ -249,8 +249,8 @@ ResultType STLSetIntersection(const Arg1& a1, const Arg2& a2) {
 // container |a2|.
 template <typename Arg1, typename Arg2>
 bool STLIncludes(const Arg1& a1, const Arg2& a2) {
-  DCHECK(STLIsSorted(a1));
-  DCHECK(STLIsSorted(a2));
+  //DCHECK(STLIsSorted(a1));
+  //DCHECK(STLIsSorted(a2));
   return std::includes(a1.begin(), a1.end(),
                        a2.begin(), a2.end());
 }
diff --git a/src/butil/strings/string_util.h b/src/butil/strings/string_util.h
index de37119..ff90a47 100644
--- a/src/butil/strings/string_util.h
+++ b/src/butil/strings/string_util.h
@@ -353,7 +353,7 @@ inline bool IsHexDigit(Char c) {
 
 template <typename Char>
 inline Char HexDigitToInt(Char c) {
-  DCHECK(IsHexDigit(c));
+  //DCHECK(IsHexDigit(c));
   if (c >= '0' && c <= '9')
     return c - '0';
   if (c >= 'A' && c <= 'F')
@@ -426,7 +426,7 @@ BUTIL_EXPORT void ReplaceSubstringsAfterOffset(std::string* str,
 template <class string_type>
 inline typename string_type::value_type* WriteInto(string_type* str,
                                                    size_t length_with_null) {
-  DCHECK_GT(length_with_null, 1u);
+  //DCHECK_GT(length_with_null, 1u);
   str->reserve(length_with_null);
   str->resize(length_with_null - 1);
   return &((*str)[0]);
diff --git a/src/butil/strings/string_util_posix.h b/src/butil/strings/string_util_posix.h
index 3496014..73add4e 100644
--- a/src/butil/strings/string_util_posix.h
+++ b/src/butil/strings/string_util_posix.h
@@ -10,7 +10,7 @@
 #include <string.h>
 #include <wchar.h>
 
-#include "butil/logging.h"
+//#include "butil/logging.h"
 
 namespace butil {
 
@@ -43,7 +43,7 @@ inline int strncmp16(const char16* s1, const char16* s2, size_t count) {
 
 inline int vswprintf(wchar_t* buffer, size_t size,
                      const wchar_t* format, va_list arguments) {
-  DCHECK(IsWprintfFormatPortable(format));
+  //DCHECK(IsWprintfFormatPortable(format));
   return ::vswprintf(buffer, size, format, arguments);
 }
 
diff --git a/src/butil/strings/stringprintf.cc b/src/butil/strings/stringprintf.cc
index 3f40e72..46efd74 100644
--- a/src/butil/strings/stringprintf.cc
+++ b/src/butil/strings/stringprintf.cc
@@ -9,6 +9,7 @@
 #include "butil/scoped_clear_errno.h"
 #include "butil/strings/string_util.h"
 #include "butil/strings/utf_string_conversions.h"
+#include "butil/logging.h"
 
 // gcc7 reports that the first arg to vsnprintfT in StringAppendVT is NULL,
 // which I can't figure out why, turn off the warning right now.
diff --git a/src/butil/strings/utf_string_conversions.cc b/src/butil/strings/utf_string_conversions.cc
index 065fbe3..0c9d735 100644
--- a/src/butil/strings/utf_string_conversions.cc
+++ b/src/butil/strings/utf_string_conversions.cc
@@ -7,6 +7,7 @@
 #include "butil/strings/string_piece.h"
 #include "butil/strings/string_util.h"
 #include "butil/strings/utf_string_conversion_utils.h"
+#include "butil/logging.h"
 
 namespace butil {
 
diff --git a/src/butil/synchronous_event.h b/src/butil/synchronous_event.h
index b0839e5..c142ace 100644
--- a/src/butil/synchronous_event.h
+++ b/src/butil/synchronous_event.h
@@ -23,7 +23,7 @@
 #include <vector>                             // std::vector
 #include <algorithm>                          // std::find
 #include <errno.h>                            // errno
-#include "butil/logging.h"
+//#include "butil/logging.h"
 
 // Synchronous event notification.
 // Observers to an event will be called immediately in the same context where
@@ -69,7 +69,7 @@ public:
     // Returns 0 when successful, -1 when the obsever is NULL or already added. 
     int subscribe(Observer* ob) {
         if (NULL == ob) {
-            LOG(ERROR) << "Observer is NULL";
+            //LOG(ERROR) << "Observer is NULL";
             return -1;
         }
         if (std::find(_obs.begin(), _obs.end(), ob) != _obs.end()) {
@@ -85,7 +85,7 @@ public:
     // Returns 0 when successful, -1 when the observer is NULL or already removed.
     int unsubscribe(Observer* ob) {
         if (NULL == ob) {
-            LOG(ERROR) << "Observer is NULL";
+            //LOG(ERROR) << "Observer is NULL";
             return -1;
         }
         typename ObserverSet::iterator
diff --git a/src/bvar/collector.cpp b/src/bvar/collector.cpp
index c7844c1..545f9b9 100644
--- a/src/bvar/collector.cpp
+++ b/src/bvar/collector.cpp
@@ -22,6 +22,7 @@
 #include "butil/memory/singleton_on_pthread_once.h"
 #include "bvar/bvar.h"
 #include "bvar/collector.h"
+#include "butil/logging.h"
 
 namespace bvar {
 
diff --git a/src/bvar/default_variables.cpp b/src/bvar/default_variables.cpp
index be02c50..aede053 100644
--- a/src/bvar/default_variables.cpp
+++ b/src/bvar/default_variables.cpp
@@ -37,6 +37,7 @@
 #include "butil/process_util.h"            // ReadCommandLine
 #include "butil/popen.h"                   // read_command_output
 #include "bvar/passive_status.h"
+#include "butil/logging.h"
 
 namespace bvar {
 
diff --git a/src/bvar/detail/agent_group.h b/src/bvar/detail/agent_group.h
index ceb7c05..6363a8d 100644
--- a/src/bvar/detail/agent_group.h
+++ b/src/bvar/detail/agent_group.h
@@ -31,7 +31,7 @@
 #include "butil/thread_local.h"              // thread_atexit
 #include "butil/macros.h"                    // BAIDU_CACHELINE_ALIGNMENT
 #include "butil/scoped_lock.h"
-#include "butil/logging.h"
+//#include "butil/logging.h"
 
 namespace bvar {
 namespace detail {
@@ -129,13 +129,13 @@ public:
     // Note: May return non-null for unexist id, see notes on ThreadBlock
     inline static Agent* get_or_create_tls_agent(AgentId id) {
         if (__builtin_expect(id < 0, 0)) {
-            CHECK(false) << "Invalid id=" << id;
+            //CHECK(false) << "Invalid id=" << id;
             return NULL;
         }
         if (_s_tls_blocks == NULL) {
             _s_tls_blocks = new (std::nothrow) std::vector<ThreadBlock *>;
             if (__builtin_expect(_s_tls_blocks == NULL, 0)) {
-                LOG(FATAL) << "Fail to create vector, " << berror();
+                //LOG(FATAL) << "Fail to create vector, " << berror();
                 return NULL;
             }
             butil::thread_atexit(_destroy_tls_blocks);
diff --git a/src/bvar/detail/combiner.h b/src/bvar/detail/combiner.h
index 6a6ab80..b01f7af 100644
--- a/src/bvar/detail/combiner.h
+++ b/src/bvar/detail/combiner.h
@@ -296,7 +296,7 @@ friend class GlobalValue<self_type>;
             // Create the agent
             agent = AgentGroup::get_or_create_tls_agent(_id);
             if (NULL == agent) {
-                LOG(FATAL) << "Fail to create agent";
+                //LOG(FATAL) << "Fail to create agent";
                 return NULL;
             }
         }
diff --git a/src/bvar/detail/percentile.h b/src/bvar/detail/percentile.h
index f04268d..48b6621 100644
--- a/src/bvar/detail/percentile.h
+++ b/src/bvar/detail/percentile.h
@@ -67,8 +67,8 @@ public:
             std::sort(_samples, _samples + saved_num);
             _sorted = true;
         }
-        CHECK_EQ(saved_num, _num_samples) << "You must call get_number() on"
-            " a unchanging PercentileInterval";
+        //CHECK_EQ(saved_num, _num_samples) << "You must call get_number() on"
+        //    " a unchanging PercentileInterval";
         return _samples[index];
     }
 
@@ -84,7 +84,7 @@ public:
         }
         BAIDU_CASSERT(SAMPLE_SIZE >= size2,
                       must_merge_small_interval_into_larger_one_currently);
-        CHECK_EQ(rhs._num_samples, rhs._num_added);
+        //CHECK_EQ(rhs._num_samples, rhs._num_added);
         // Assume that the probability of each sample in |this| is a0/b0 and
         // the probability of each sample in |rhs| is a1/b1.
         // We are going to randomly pick some samples from |this| and |rhs| to
@@ -97,13 +97,13 @@ public:
         // |b1*SAMPLE_SIZE/(b0+b1)| from |rhs|.
         if (_num_added + rhs._num_added <= SAMPLE_SIZE) {
             // No sample should be dropped
-            CHECK_EQ(_num_samples, _num_added)
-                << "_num_added=" << _num_added
-                << " rhs._num_added" << rhs._num_added
-                << " _num_samples=" << _num_samples
-                << " rhs._num_samples=" << rhs._num_samples
-                << " SAMPLE_SIZE=" << SAMPLE_SIZE
-                << " size2=" << size2;
+            //CHECK_EQ(_num_samples, _num_added)
+            //    << "_num_added=" << _num_added
+            //    << " rhs._num_added" << rhs._num_added
+            //    << " _num_samples=" << _num_samples
+            //    << " rhs._num_samples=" << rhs._num_samples
+            //    << " SAMPLE_SIZE=" << SAMPLE_SIZE
+            //    << " size2=" << size2;
             memcpy(_samples + _num_samples, rhs._samples, 
                    sizeof(_samples[0]) * rhs._num_samples);
             _num_samples += rhs._num_samples;
@@ -118,13 +118,13 @@ public:
             //    num_remain < SAMPLE_SIZE = _num_added
             size_t num_remain = round_of_expectation(
                     _num_added * SAMPLE_SIZE, _num_added + rhs._num_added);
-            CHECK_LE(num_remain, _num_samples);
+            //CHECK_LE(num_remain, _num_samples);
             // Randomly drop samples of this
             for (size_t i = _num_samples; i > num_remain; --i) {
                 _samples[butil::fast_rand_less_than(i)] = _samples[i - 1];
             }
             const size_t num_remain_from_rhs = SAMPLE_SIZE - num_remain;
-            CHECK_LE(num_remain_from_rhs, rhs._num_samples);
+            //CHECK_LE(num_remain_from_rhs, rhs._num_samples);
             // Have to copy data from rhs to shuffle since it's const
             DEFINE_SMALL_ARRAY(uint32_t, tmp, rhs._num_samples, 64);
             memcpy(tmp, rhs._samples, sizeof(uint32_t) * rhs._num_samples);
@@ -134,7 +134,7 @@ public:
                 tmp[index] = tmp[rhs._num_samples - i - 1];
             }
             _num_samples = num_remain;
-            CHECK_EQ(_num_samples, SAMPLE_SIZE);
+            //CHECK_EQ(_num_samples, SAMPLE_SIZE);
         }
         _num_added += rhs._num_added;
     }
@@ -142,7 +142,7 @@ public:
     // Randomly pick n samples from mutable_rhs to |this|
     template <size_t size2>
     void merge_with_expectation(PercentileInterval<size2>& mutable_rhs, size_t n) {
-        CHECK(n <= mutable_rhs._num_samples);
+        //CHECK(n <= mutable_rhs._num_samples);
         _num_added += mutable_rhs._num_added;
         if (_num_samples + n <= SAMPLE_SIZE && n == mutable_rhs._num_samples) {
             memcpy(_samples + _num_samples, mutable_rhs._samples, sizeof(_samples[0]) * n);
@@ -168,7 +168,7 @@ public:
     // Returns true if the input was stored.
     bool add32(uint32_t x) {
         if (BAIDU_UNLIKELY(_num_samples >= SAMPLE_SIZE)) {
-            LOG(ERROR) << "This interval was full";
+            //LOG(ERROR) << "This interval was full";
             return false;
         }
         ++_num_added;
@@ -309,7 +309,7 @@ friend class AddLatency;
             }
             n -= invl.added_count();
         }
-        CHECK(false) << "Can't reach here";
+        //CHECK(false) << "Can't reach here";
         return std::numeric_limits<uint32_t>::max();
     }
 
diff --git a/src/bvar/detail/sampler.cpp b/src/bvar/detail/sampler.cpp
index f2ca308..b76d0b2 100644
--- a/src/bvar/detail/sampler.cpp
+++ b/src/bvar/detail/sampler.cpp
@@ -23,6 +23,7 @@
 #include "bvar/detail/sampler.h"
 #include "bvar/passive_status.h"
 #include "bvar/window.h"
+#include "butil/logging.h"
 
 namespace bvar {
 namespace detail {
diff --git a/src/bvar/detail/sampler.h b/src/bvar/detail/sampler.h
index 85ec237..015865f 100644
--- a/src/bvar/detail/sampler.h
+++ b/src/bvar/detail/sampler.h
@@ -23,7 +23,7 @@
 #include <vector>
 #include "butil/containers/linked_list.h"// LinkNode
 #include "butil/scoped_lock.h"           // BAIDU_SCOPED_LOCK
-#include "butil/logging.h"               // LOG()
+//#include "butil/logging.h"               // LOG()
 #include "butil/containers/bounded_queue.h"// BoundedQueue
 #include "butil/type_traits.h"           // is_same
 #include "butil/time.h"                  // gettimeofday_us
@@ -73,7 +73,7 @@ friend class SamplerCollector;
 struct VoidOp {
     template <typename T>
     T operator()(const T&, const T&) const {
-        CHECK(false) << "This function should never be called, abort";
+        //CHECK(false) << "This function should never be called, abort";
         abort();
     }
 };
@@ -142,7 +142,7 @@ public:
 
     bool get_value(time_t window_size, Sample<T>* result) {
         if (window_size <= 0) {
-            LOG(FATAL) << "Invalid window_size=" << window_size;
+            //LOG(FATAL) << "Invalid window_size=" << window_size;
             return false;
         }
         BAIDU_SCOPED_LOCK(_mutex);
@@ -155,7 +155,7 @@ public:
             oldest = _q.top();
         }
         Sample<T>* latest = _q.bottom();
-        DCHECK(latest != oldest);
+        //DCHECK(latest != oldest);
         if (butil::is_same<InvOp, VoidOp>::value) {
             // No inverse op. Sum up all samples within the window.
             result->data = latest->data;
@@ -178,7 +178,7 @@ public:
     // Change the time window which can only go larger.
     int set_window_size(time_t window_size) {
         if (window_size <= 0 || window_size > MAX_SECONDS_LIMIT) {
-            LOG(ERROR) << "Invalid window_size=" << window_size;
+            //LOG(ERROR) << "Invalid window_size=" << window_size;
             return -1;
         }
         BAIDU_SCOPED_LOCK(_mutex);
@@ -190,7 +190,7 @@ public:
 
     void get_samples(std::vector<T> *samples, time_t window_size) {
         if (window_size <= 0) {
-            LOG(FATAL) << "Invalid window_size=" << window_size;
+            //LOG(FATAL) << "Invalid window_size=" << window_size;
             return;
         }
         BAIDU_SCOPED_LOCK(_mutex);
diff --git a/src/bvar/detail/series.h b/src/bvar/detail/series.h
index b12b7c6..c7f7bf5 100644
--- a/src/bvar/detail/series.h
+++ b/src/bvar/detail/series.h
@@ -230,7 +230,7 @@ public:
 template <typename T, typename Op>
 void Series<T, Op>::describe(std::ostream& os,
                              const std::string* vector_names) const {
-    CHECK(vector_names == NULL);
+    //CHECK(vector_names == NULL);
     pthread_mutex_lock(&this->_mutex);
     const int second_begin = this->_nsecond;
     const int minute_begin = this->_nminute;
diff --git a/src/bvar/latency_recorder.cpp b/src/bvar/latency_recorder.cpp
index ed91422..7831d63 100644
--- a/src/bvar/latency_recorder.cpp
+++ b/src/bvar/latency_recorder.cpp
@@ -20,6 +20,7 @@
 #include <gflags/gflags.h>
 #include "butil/unique_ptr.h"
 #include "bvar/latency_recorder.h"
+#include "butil/logging.h"
 
 namespace bvar {
 
diff --git a/src/bvar/passive_status.h b/src/bvar/passive_status.h
index eb4900d..8c6e361 100644
--- a/src/bvar/passive_status.h
+++ b/src/bvar/passive_status.h
@@ -162,7 +162,7 @@ public:
     }
 
     Tp reset() {
-        CHECK(false) << "PassiveStatus::reset() should never be called, abort";
+        //CHECK(false) << "PassiveStatus::reset() should never be called, abort";
         abort();
     }
 
diff --git a/src/bvar/recorder.h b/src/bvar/recorder.h
index 33bb65d..40572fe 100644
--- a/src/bvar/recorder.h
+++ b/src/bvar/recorder.h
@@ -22,7 +22,7 @@
 
 #include <stdint.h>                              // int64_t uint64_t
 #include "butil/macros.h"                         // BAIDU_CASSERT
-#include "butil/logging.h"                        // LOG
+//#include "butil/logging.h"                        // LOG
 #include "bvar/detail/combiner.h"                // detail::AgentCombiner
 #include "bvar/variable.h"
 #include "bvar/window.h"
@@ -245,22 +245,23 @@ inline IntRecorder& IntRecorder::operator<<(int64_t sample) {
             reason = "underflows";
             sample = std::numeric_limits<int>::min();
         }
+        (void)reason;
         // Truncate to be max or min of int. We're using 44 bits to store the
         // sum thus following aggregations are not likely to be over/underflow.
         if (!name().empty()) {
-            LOG(WARNING) << "Input=" << sample << " to `" << name()
-                       << "\' " << reason;
+            //LOG(WARNING) << "Input=" << sample << " to `" << name()
+            //           << "\' " << reason;
         } else if (!_debug_name.empty()) {
-            LOG(WARNING) << "Input=" << sample << " to `" << _debug_name
-                       << "\' " << reason;
+            //LOG(WARNING) << "Input=" << sample << " to `" << _debug_name
+            //           << "\' " << reason;
         } else {
-            LOG(WARNING) << "Input=" << sample << " to IntRecorder("
-                       << (void*)this << ") " << reason;
+            //LOG(WARNING) << "Input=" << sample << " to IntRecorder("
+            //           << (void*)this << ") " << reason;
         }
     }
     agent_type* agent = _combiner.get_or_create_tls_agent();
     if (BAIDU_UNLIKELY(!agent)) {
-        LOG(FATAL) << "Fail to create agent";
+        //LOG(FATAL) << "Fail to create agent";
         return *this;
     }
     uint64_t n;
diff --git a/src/bvar/reducer.h b/src/bvar/reducer.h
index fbd4fa7..f6eca68 100644
--- a/src/bvar/reducer.h
+++ b/src/bvar/reducer.h
@@ -21,7 +21,7 @@
 #define  BVAR_REDUCER_H
 
 #include <limits>                                 // std::numeric_limits
-#include "butil/logging.h"                         // LOG()
+//#include "butil/logging.h"                         // LOG()
 #include "butil/type_traits.h"                     // butil::add_cr_non_integral
 #include "butil/class_name.h"                      // class_name_str
 #include "bvar/variable.h"                        // Variable
@@ -115,10 +115,10 @@ public:
     // Notice that this function walks through threads that ever add values
     // into this reducer. You should avoid calling it frequently.
     T get_value() const {
-        CHECK(!(butil::is_same<InvOp, detail::VoidOp>::value) || _sampler == NULL)
-            << "You should not call Reducer<" << butil::class_name_str<T>()
-            << ", " << butil::class_name_str<Op>() << ">::get_value() when a"
-            << " Window<> is used because the operator does not have inverse.";
+        //CHECK(!(butil::is_same<InvOp, detail::VoidOp>::value) || _sampler == NULL)
+        //    << "You should not call Reducer<" << butil::class_name_str<T>()
+        //    << ", " << butil::class_name_str<Op>() << ">::get_value() when a"
+        //    << " Window<> is used because the operator does not have inverse.";
         return _combiner.combine_agents();
     }
 
@@ -193,7 +193,7 @@ inline Reducer<T, Op, InvOp>& Reducer<T, Op, InvOp>::operator<<(
     // It's wait-free for most time
     agent_type* agent = _combiner.get_or_create_tls_agent();
     if (__builtin_expect(!agent, 0)) {
-        LOG(FATAL) << "Fail to create agent";
+        //LOG(FATAL) << "Fail to create agent";
         return *this;
     }
     agent->element.modify(_combiner.op(), value);
diff --git a/src/bvar/utils/lock_timer.h b/src/bvar/utils/lock_timer.h
index f41024a..6a9b154 100644
--- a/src/bvar/utils/lock_timer.h
+++ b/src/bvar/utils/lock_timer.h
@@ -120,7 +120,7 @@ struct MutexConstructor<pthread_mutex_t> {
     bool operator()(pthread_mutex_t* mutex) const { 
 #ifndef NDEBUG
         const int rc = pthread_mutex_init(mutex, NULL);
-        CHECK_EQ(0, rc) << "Fail to init pthread_mutex, " << berror(rc);
+        //CHECK_EQ(0, rc) << "Fail to init pthread_mutex, " << berror(rc);
         return rc == 0;
 #else
         return pthread_mutex_init(mutex, NULL) == 0;
@@ -133,7 +133,7 @@ struct MutexDestructor<pthread_mutex_t> {
     bool operator()(pthread_mutex_t* mutex) const { 
 #ifndef NDEBUG
         const int rc = pthread_mutex_destroy(mutex);
-        CHECK_EQ(0, rc) << "Fail to destroy pthread_mutex, " << berror(rc);
+        //CHECK_EQ(0, rc) << "Fail to destroy pthread_mutex, " << berror(rc);
         return rc == 0;
 #else
         return pthread_mutex_destroy(mutex) == 0;
diff --git a/src/bvar/variable.cpp b/src/bvar/variable.cpp
index 17eeadc..cbbb05f 100644
--- a/src/bvar/variable.cpp
+++ b/src/bvar/variable.cpp
@@ -31,6 +31,7 @@
 #include "butil/file_util.h"                     // butil::FilePath
 #include "bvar/gflag.h"
 #include "bvar/variable.h"
+#include "butil/logging.h"
 
 namespace bvar {
 
diff --git a/src/bvar/window.h b/src/bvar/window.h
index a5780bf..2ebf306 100644
--- a/src/bvar/window.h
+++ b/src/bvar/window.h
@@ -23,7 +23,7 @@
 #include <limits>                                 // std::numeric_limits
 #include <math.h>                                 // round
 #include <gflags/gflags_declare.h>
-#include "butil/logging.h"                         // LOG
+//#include "butil/logging.h"                         // LOG
 #include "bvar/detail/sampler.h"
 #include "bvar/detail/series.h"
 #include "bvar/variable.h"
@@ -81,7 +81,7 @@ public:
         , _window_size(window_size > 0 ? window_size : FLAGS_bvar_dump_interval)
         , _sampler(var->get_sampler())
         , _series_sampler(NULL) {
-        CHECK_EQ(0, _sampler->set_window_size(_window_size));
+        //CHECK_EQ(0, _sampler->set_window_size(_window_size));
     }
     
     ~WindowBase() {
diff --git a/tools/parallel_http/Makefile b/tools/parallel_http/Makefile
index 0336c24..b857edd 100644
--- a/tools/parallel_http/Makefile
+++ b/tools/parallel_http/Makefile
@@ -1,50 +1,274 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#   http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-BRPC_PATH = ../../
-include $(BRPC_PATH)/config.mk
-CXXFLAGS = $(CPPFLAGS) -std=c++0x -DNDEBUG -O2 -D__const__= -pipe -W -Wall -fPIC -fno-omit-frame-pointer -Wno-unused-parameter
-HDRPATHS = -I$(BRPC_PATH)/output/include $(addprefix -I, $(HDRS))
-LIBPATHS = -L$(BRPC_PATH)/output/lib $(addprefix -L, $(LIBS))
-STATIC_LINKINGS += $(BRPC_PATH)/output/lib/libbrpc.a
-
-SOURCES = $(wildcard *.cpp)
-OBJS = $(addsuffix .o, $(basename $(SOURCES))) 
-
-.PHONY:all
-all: parallel_http
-
-.PHONY:clean
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.17
+
+# Default target executed when no arguments are given to make.
+default_target: all
+
+.PHONY : default_target
+
+# Allow only one "make -f Makefile2" at a time, but pass parallelism.
+.NOTPARALLEL:
+
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Disable VCS-based implicit rules.
+% : %,v
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%,v
+
+
+# Disable VCS-based implicit rules.
+% : SCCS/s.%
+
+
+# Disable VCS-based implicit rules.
+% : s.%
+
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Command-line flag to silence nested $(MAKE).
+$(VERBOSE)MAKESILENT = -s
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /usr/bin/cmake3
+
+# The command to remove a file.
+RM = /usr/bin/cmake3 -E rm -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /home/fanyu/Downloads/incubator-brpc
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /home/fanyu/Downloads/incubator-brpc
+
+#=============================================================================
+# Targets provided globally by CMake.
+
+# Special rule for the target install/strip
+install/strip: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip
+
+# Special rule for the target install/strip
+install/strip/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip/fast
+
+# Special rule for the target install/local
+install/local: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local
+
+# Special rule for the target install/local
+install/local/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local/fast
+
+# Special rule for the target rebuild_cache
+rebuild_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
+	/usr/bin/cmake3 --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : rebuild_cache
+
+# Special rule for the target rebuild_cache
+rebuild_cache/fast: rebuild_cache
+
+.PHONY : rebuild_cache/fast
+
+# Special rule for the target edit_cache
+edit_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake cache editor..."
+	/usr/bin/ccmake3 -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : edit_cache
+
+# Special rule for the target edit_cache
+edit_cache/fast: edit_cache
+
+.PHONY : edit_cache/fast
+
+# Special rule for the target package_source
+package_source:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool for source..."
+	cd /home/fanyu/Downloads/incubator-brpc && /usr/bin/cpack3 --config ./CPackSourceConfig.cmake /home/fanyu/Downloads/incubator-brpc/CPackSourceConfig.cmake
+.PHONY : package_source
+
+# Special rule for the target package_source
+package_source/fast: package_source
+
+.PHONY : package_source/fast
+
+# Special rule for the target package
+package: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool..."
+	cd /home/fanyu/Downloads/incubator-brpc && /usr/bin/cpack3 --config ./CPackConfig.cmake
+.PHONY : package
+
+# Special rule for the target package
+package/fast: package
+
+.PHONY : package/fast
+
+# Special rule for the target install
+install: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install
+
+# Special rule for the target install
+install/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install/fast
+
+# Special rule for the target list_install_components
+list_install_components:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Available install components are: \"Unspecified\""
+.PHONY : list_install_components
+
+# Special rule for the target list_install_components
+list_install_components/fast: list_install_components
+
+.PHONY : list_install_components/fast
+
+# The main all target
+all: cmake_check_build_system
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles /home/fanyu/Downloads/incubator-brpc/tools/parallel_http/CMakeFiles/progress.marks
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/parallel_http/all
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles 0
+.PHONY : all
+
+# The main clean target
 clean:
-	@echo "Cleaning"
-	@rm -rf parallel_http $(OBJS)
-
-parallel_http:$(OBJS)
-	@echo "Linking $@"
-ifeq ($(SYSTEM),Linux)
-	@$(CXX) $(LIBPATHS) -Xlinker "-(" $^ -Wl,-Bstatic $(STATIC_LINKINGS) -Wl,-Bdynamic -Xlinker "-)" $(DYNAMIC_LINKINGS) -o $@
-else ifeq ($(SYSTEM),Darwin)
-	@$(CXX) $(LIBPATHS) $^ $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS) -o $@
-endif
-
-%.o:%.cpp
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
-
-%.o:%.cc
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/parallel_http/clean
+.PHONY : clean
+
+# The main clean target
+clean/fast: clean
+
+.PHONY : clean/fast
+
+# Prepare targets for installation.
+preinstall: all
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/parallel_http/preinstall
+.PHONY : preinstall
+
+# Prepare targets for installation.
+preinstall/fast:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/parallel_http/preinstall
+.PHONY : preinstall/fast
+
+# clear depends
+depend:
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
+.PHONY : depend
+
+# Convenience name for target.
+tools/parallel_http/CMakeFiles/parallel_http.dir/rule:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/parallel_http/CMakeFiles/parallel_http.dir/rule
+.PHONY : tools/parallel_http/CMakeFiles/parallel_http.dir/rule
+
+# Convenience name for target.
+parallel_http: tools/parallel_http/CMakeFiles/parallel_http.dir/rule
+
+.PHONY : parallel_http
+
+# fast build rule for target.
+parallel_http/fast:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/parallel_http/CMakeFiles/parallel_http.dir/build.make tools/parallel_http/CMakeFiles/parallel_http.dir/build
+.PHONY : parallel_http/fast
+
+parallel_http.o: parallel_http.cpp.o
+
+.PHONY : parallel_http.o
+
+# target to build an object file
+parallel_http.cpp.o:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/parallel_http/CMakeFiles/parallel_http.dir/build.make tools/parallel_http/CMakeFiles/parallel_http.dir/parallel_http.cpp.o
+.PHONY : parallel_http.cpp.o
+
+parallel_http.i: parallel_http.cpp.i
+
+.PHONY : parallel_http.i
+
+# target to preprocess a source file
+parallel_http.cpp.i:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/parallel_http/CMakeFiles/parallel_http.dir/build.make tools/parallel_http/CMakeFiles/parallel_http.dir/parallel_http.cpp.i
+.PHONY : parallel_http.cpp.i
+
+parallel_http.s: parallel_http.cpp.s
+
+.PHONY : parallel_http.s
+
+# target to generate assembly for a file
+parallel_http.cpp.s:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/parallel_http/CMakeFiles/parallel_http.dir/build.make tools/parallel_http/CMakeFiles/parallel_http.dir/parallel_http.cpp.s
+.PHONY : parallel_http.cpp.s
+
+# Help Target
+help:
+	@echo "The following are some of the valid targets for this Makefile:"
+	@echo "... all (the default if no target is provided)"
+	@echo "... clean"
+	@echo "... depend"
+	@echo "... edit_cache"
+	@echo "... install"
+	@echo "... install/local"
+	@echo "... install/strip"
+	@echo "... list_install_components"
+	@echo "... package"
+	@echo "... package_source"
+	@echo "... rebuild_cache"
+	@echo "... parallel_http"
+	@echo "... parallel_http.o"
+	@echo "... parallel_http.i"
+	@echo "... parallel_http.s"
+.PHONY : help
+
+
+
+#=============================================================================
+# Special targets to cleanup operation of make.
+
+# Special rule to run CMake to check the build system integrity.
+# No rule that depends on this can have commands that come from listfiles
+# because they might be regenerated.
+cmake_check_build_system:
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
+.PHONY : cmake_check_build_system
+
diff --git a/tools/rpc_press/Makefile b/tools/rpc_press/Makefile
index 29d52c7..9e94e87 100644
--- a/tools/rpc_press/Makefile
+++ b/tools/rpc_press/Makefile
@@ -1,50 +1,394 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#   http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-BRPC_PATH = ../../
-include $(BRPC_PATH)/config.mk
-CXXFLAGS = $(CPPFLAGS) -std=c++0x -DNDEBUG -O2 -D__const__= -pipe -W -Wall -fPIC -fno-omit-frame-pointer -Wno-unused-parameter
-HDRPATHS = -I$(BRPC_PATH)/output/include $(addprefix -I, $(HDRS))
-LIBPATHS = -L$(BRPC_PATH)/output/lib $(addprefix -L, $(LIBS))
-STATIC_LINKINGS += $(BRPC_PATH)/output/lib/libbrpc.a
-
-SOURCES = $(wildcard *.cpp)
-OBJS = $(addsuffix .o, $(basename $(SOURCES))) 
-
-.PHONY:all
-all: rpc_press
-
-.PHONY:clean
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.17
+
+# Default target executed when no arguments are given to make.
+default_target: all
+
+.PHONY : default_target
+
+# Allow only one "make -f Makefile2" at a time, but pass parallelism.
+.NOTPARALLEL:
+
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Disable VCS-based implicit rules.
+% : %,v
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%,v
+
+
+# Disable VCS-based implicit rules.
+% : SCCS/s.%
+
+
+# Disable VCS-based implicit rules.
+% : s.%
+
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Command-line flag to silence nested $(MAKE).
+$(VERBOSE)MAKESILENT = -s
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /usr/bin/cmake3
+
+# The command to remove a file.
+RM = /usr/bin/cmake3 -E rm -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /home/fanyu/Downloads/incubator-brpc
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /home/fanyu/Downloads/incubator-brpc
+
+#=============================================================================
+# Targets provided globally by CMake.
+
+# Special rule for the target install/strip
+install/strip: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip
+
+# Special rule for the target install/strip
+install/strip/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip/fast
+
+# Special rule for the target install/local
+install/local: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local
+
+# Special rule for the target install/local
+install/local/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local/fast
+
+# Special rule for the target install
+install: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install
+
+# Special rule for the target install
+install/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install/fast
+
+# Special rule for the target list_install_components
+list_install_components:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Available install components are: \"Unspecified\""
+.PHONY : list_install_components
+
+# Special rule for the target list_install_components
+list_install_components/fast: list_install_components
+
+.PHONY : list_install_components/fast
+
+# Special rule for the target rebuild_cache
+rebuild_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
+	/usr/bin/cmake3 --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : rebuild_cache
+
+# Special rule for the target rebuild_cache
+rebuild_cache/fast: rebuild_cache
+
+.PHONY : rebuild_cache/fast
+
+# Special rule for the target edit_cache
+edit_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake cache editor..."
+	/usr/bin/ccmake3 -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : edit_cache
+
+# Special rule for the target edit_cache
+edit_cache/fast: edit_cache
+
+.PHONY : edit_cache/fast
+
+# Special rule for the target package_source
+package_source:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool for source..."
+	cd /home/fanyu/Downloads/incubator-brpc && /usr/bin/cpack3 --config ./CPackSourceConfig.cmake /home/fanyu/Downloads/incubator-brpc/CPackSourceConfig.cmake
+.PHONY : package_source
+
+# Special rule for the target package_source
+package_source/fast: package_source
+
+.PHONY : package_source/fast
+
+# Special rule for the target package
+package: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool..."
+	cd /home/fanyu/Downloads/incubator-brpc && /usr/bin/cpack3 --config ./CPackConfig.cmake
+.PHONY : package
+
+# Special rule for the target package
+package/fast: package
+
+.PHONY : package/fast
+
+# The main all target
+all: cmake_check_build_system
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles /home/fanyu/Downloads/incubator-brpc/tools/rpc_press/CMakeFiles/progress.marks
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_press/all
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles 0
+.PHONY : all
+
+# The main clean target
 clean:
-	@echo "Cleaning"
-	@rm -rf rpc_press $(OBJS)
-
-rpc_press:$(OBJS)
-	@echo "Linking $@"
-ifeq ($(SYSTEM),Linux)
-	@$(CXX) $(LIBPATHS) -Xlinker "-(" $^ -Wl,-Bstatic $(STATIC_LINKINGS) -Wl,-Bdynamic -Xlinker "-)" $(DYNAMIC_LINKINGS) -o $@
-else ifeq ($(SYSTEM),Darwin)
-	@$(CXX) $(LIBPATHS) $^ $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS) -o $@
-endif
-
-%.o:%.cpp
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
-
-%.o:%.cc
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_press/clean
+.PHONY : clean
+
+# The main clean target
+clean/fast: clean
+
+.PHONY : clean/fast
+
+# Prepare targets for installation.
+preinstall: all
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_press/preinstall
+.PHONY : preinstall
+
+# Prepare targets for installation.
+preinstall/fast:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_press/preinstall
+.PHONY : preinstall/fast
+
+# clear depends
+depend:
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
+.PHONY : depend
+
+# Convenience name for target.
+tools/rpc_press/CMakeFiles/rpc_press.dir/rule:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_press/CMakeFiles/rpc_press.dir/rule
+.PHONY : tools/rpc_press/CMakeFiles/rpc_press.dir/rule
+
+# Convenience name for target.
+rpc_press: tools/rpc_press/CMakeFiles/rpc_press.dir/rule
+
+.PHONY : rpc_press
+
+# fast build rule for target.
+rpc_press/fast:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/build
+.PHONY : rpc_press/fast
+
+info_thread.o: info_thread.cpp.o
+
+.PHONY : info_thread.o
+
+# target to build an object file
+info_thread.cpp.o:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/info_thread.cpp.o
+.PHONY : info_thread.cpp.o
+
+info_thread.i: info_thread.cpp.i
+
+.PHONY : info_thread.i
+
+# target to preprocess a source file
+info_thread.cpp.i:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/info_thread.cpp.i
+.PHONY : info_thread.cpp.i
+
+info_thread.s: info_thread.cpp.s
+
+.PHONY : info_thread.s
+
+# target to generate assembly for a file
+info_thread.cpp.s:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/info_thread.cpp.s
+.PHONY : info_thread.cpp.s
+
+json_loader.o: json_loader.cpp.o
+
+.PHONY : json_loader.o
+
+# target to build an object file
+json_loader.cpp.o:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/json_loader.cpp.o
+.PHONY : json_loader.cpp.o
+
+json_loader.i: json_loader.cpp.i
+
+.PHONY : json_loader.i
+
+# target to preprocess a source file
+json_loader.cpp.i:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/json_loader.cpp.i
+.PHONY : json_loader.cpp.i
+
+json_loader.s: json_loader.cpp.s
+
+.PHONY : json_loader.s
+
+# target to generate assembly for a file
+json_loader.cpp.s:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/json_loader.cpp.s
+.PHONY : json_loader.cpp.s
+
+pb_util.o: pb_util.cpp.o
+
+.PHONY : pb_util.o
+
+# target to build an object file
+pb_util.cpp.o:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/pb_util.cpp.o
+.PHONY : pb_util.cpp.o
+
+pb_util.i: pb_util.cpp.i
+
+.PHONY : pb_util.i
+
+# target to preprocess a source file
+pb_util.cpp.i:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/pb_util.cpp.i
+.PHONY : pb_util.cpp.i
+
+pb_util.s: pb_util.cpp.s
+
+.PHONY : pb_util.s
+
+# target to generate assembly for a file
+pb_util.cpp.s:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/pb_util.cpp.s
+.PHONY : pb_util.cpp.s
+
+rpc_press.o: rpc_press.cpp.o
+
+.PHONY : rpc_press.o
+
+# target to build an object file
+rpc_press.cpp.o:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/rpc_press.cpp.o
+.PHONY : rpc_press.cpp.o
+
+rpc_press.i: rpc_press.cpp.i
+
+.PHONY : rpc_press.i
+
+# target to preprocess a source file
+rpc_press.cpp.i:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/rpc_press.cpp.i
+.PHONY : rpc_press.cpp.i
+
+rpc_press.s: rpc_press.cpp.s
+
+.PHONY : rpc_press.s
+
+# target to generate assembly for a file
+rpc_press.cpp.s:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/rpc_press.cpp.s
+.PHONY : rpc_press.cpp.s
+
+rpc_press_impl.o: rpc_press_impl.cpp.o
+
+.PHONY : rpc_press_impl.o
+
+# target to build an object file
+rpc_press_impl.cpp.o:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/rpc_press_impl.cpp.o
+.PHONY : rpc_press_impl.cpp.o
+
+rpc_press_impl.i: rpc_press_impl.cpp.i
+
+.PHONY : rpc_press_impl.i
+
+# target to preprocess a source file
+rpc_press_impl.cpp.i:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/rpc_press_impl.cpp.i
+.PHONY : rpc_press_impl.cpp.i
+
+rpc_press_impl.s: rpc_press_impl.cpp.s
+
+.PHONY : rpc_press_impl.s
+
+# target to generate assembly for a file
+rpc_press_impl.cpp.s:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/rpc_press_impl.cpp.s
+.PHONY : rpc_press_impl.cpp.s
+
+# Help Target
+help:
+	@echo "The following are some of the valid targets for this Makefile:"
+	@echo "... all (the default if no target is provided)"
+	@echo "... clean"
+	@echo "... depend"
+	@echo "... edit_cache"
+	@echo "... install"
+	@echo "... install/local"
+	@echo "... install/strip"
+	@echo "... list_install_components"
+	@echo "... package"
+	@echo "... package_source"
+	@echo "... rebuild_cache"
+	@echo "... rpc_press"
+	@echo "... info_thread.o"
+	@echo "... info_thread.i"
+	@echo "... info_thread.s"
+	@echo "... json_loader.o"
+	@echo "... json_loader.i"
+	@echo "... json_loader.s"
+	@echo "... pb_util.o"
+	@echo "... pb_util.i"
+	@echo "... pb_util.s"
+	@echo "... rpc_press.o"
+	@echo "... rpc_press.i"
+	@echo "... rpc_press.s"
+	@echo "... rpc_press_impl.o"
+	@echo "... rpc_press_impl.i"
+	@echo "... rpc_press_impl.s"
+.PHONY : help
+
+
+
+#=============================================================================
+# Special targets to cleanup operation of make.
+
+# Special rule to run CMake to check the build system integrity.
+# No rule that depends on this can have commands that come from listfiles
+# because they might be regenerated.
+cmake_check_build_system:
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
+.PHONY : cmake_check_build_system
+
diff --git a/tools/rpc_press/info_thread.cpp b/tools/rpc_press/info_thread.cpp
index 99c9db1..51d0811 100644
--- a/tools/rpc_press/info_thread.cpp
+++ b/tools/rpc_press/info_thread.cpp
@@ -16,6 +16,7 @@
 // under the License.
 
 #include "info_thread.h"
+#include "butil/logging.h"
 
 namespace brpc {
 
diff --git a/tools/rpc_replay/Makefile b/tools/rpc_replay/Makefile
index 20053e9..4e8d2c1 100644
--- a/tools/rpc_replay/Makefile
+++ b/tools/rpc_replay/Makefile
@@ -1,50 +1,304 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#   http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-BRPC_PATH = ../../
-include $(BRPC_PATH)/config.mk
-CXXFLAGS = $(CPPFLAGS) -std=c++0x -DNDEBUG -O2 -D__const__= -pipe -W -Wall -fPIC -fno-omit-frame-pointer -Wno-unused-parameter
-HDRPATHS = -I$(BRPC_PATH)/output/include $(addprefix -I, $(HDRS))
-LIBPATHS = -L$(BRPC_PATH)/output/lib $(addprefix -L, $(LIBS))
-STATIC_LINKINGS += $(BRPC_PATH)/output/lib/libbrpc.a
-
-SOURCES = $(wildcard *.cpp)
-OBJS = $(addsuffix .o, $(basename $(SOURCES))) 
-
-.PHONY:all
-all: rpc_replay
-
-.PHONY:clean
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.17
+
+# Default target executed when no arguments are given to make.
+default_target: all
+
+.PHONY : default_target
+
+# Allow only one "make -f Makefile2" at a time, but pass parallelism.
+.NOTPARALLEL:
+
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Disable VCS-based implicit rules.
+% : %,v
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%,v
+
+
+# Disable VCS-based implicit rules.
+% : SCCS/s.%
+
+
+# Disable VCS-based implicit rules.
+% : s.%
+
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Command-line flag to silence nested $(MAKE).
+$(VERBOSE)MAKESILENT = -s
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /usr/bin/cmake3
+
+# The command to remove a file.
+RM = /usr/bin/cmake3 -E rm -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /home/fanyu/Downloads/incubator-brpc
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /home/fanyu/Downloads/incubator-brpc
+
+#=============================================================================
+# Targets provided globally by CMake.
+
+# Special rule for the target install/strip
+install/strip: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip
+
+# Special rule for the target install/strip
+install/strip/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip/fast
+
+# Special rule for the target install/local
+install/local: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local
+
+# Special rule for the target install/local
+install/local/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local/fast
+
+# Special rule for the target install
+install: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install
+
+# Special rule for the target install
+install/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install/fast
+
+# Special rule for the target list_install_components
+list_install_components:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Available install components are: \"Unspecified\""
+.PHONY : list_install_components
+
+# Special rule for the target list_install_components
+list_install_components/fast: list_install_components
+
+.PHONY : list_install_components/fast
+
+# Special rule for the target rebuild_cache
+rebuild_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
+	/usr/bin/cmake3 --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : rebuild_cache
+
+# Special rule for the target rebuild_cache
+rebuild_cache/fast: rebuild_cache
+
+.PHONY : rebuild_cache/fast
+
+# Special rule for the target edit_cache
+edit_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake cache editor..."
+	/usr/bin/ccmake3 -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : edit_cache
+
+# Special rule for the target edit_cache
+edit_cache/fast: edit_cache
+
+.PHONY : edit_cache/fast
+
+# Special rule for the target package_source
+package_source:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool for source..."
+	cd /home/fanyu/Downloads/incubator-brpc && /usr/bin/cpack3 --config ./CPackSourceConfig.cmake /home/fanyu/Downloads/incubator-brpc/CPackSourceConfig.cmake
+.PHONY : package_source
+
+# Special rule for the target package_source
+package_source/fast: package_source
+
+.PHONY : package_source/fast
+
+# Special rule for the target package
+package: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool..."
+	cd /home/fanyu/Downloads/incubator-brpc && /usr/bin/cpack3 --config ./CPackConfig.cmake
+.PHONY : package
+
+# Special rule for the target package
+package/fast: package
+
+.PHONY : package/fast
+
+# The main all target
+all: cmake_check_build_system
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles /home/fanyu/Downloads/incubator-brpc/tools/rpc_replay/CMakeFiles/progress.marks
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_replay/all
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles 0
+.PHONY : all
+
+# The main clean target
 clean:
-	@echo "Cleaning"
-	@rm -rf rpc_replay $(OBJS)
-
-rpc_replay:$(OBJS)
-	@echo "Linking $@"
-ifeq ($(SYSTEM),Linux)
-	@$(CXX) $(LIBPATHS) -Xlinker "-(" $^ -Wl,-Bstatic $(STATIC_LINKINGS) -Wl,-Bdynamic -Xlinker "-)" $(DYNAMIC_LINKINGS) -o $@
-else ifeq ($(SYSTEM),Darwin)
-	@$(CXX) $(LIBPATHS) $^ $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS) -o $@
-endif
-
-%.o:%.cpp
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
-
-%.o:%.cc
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_replay/clean
+.PHONY : clean
+
+# The main clean target
+clean/fast: clean
+
+.PHONY : clean/fast
+
+# Prepare targets for installation.
+preinstall: all
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_replay/preinstall
+.PHONY : preinstall
+
+# Prepare targets for installation.
+preinstall/fast:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_replay/preinstall
+.PHONY : preinstall/fast
+
+# clear depends
+depend:
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
+.PHONY : depend
+
+# Convenience name for target.
+tools/rpc_replay/CMakeFiles/rpc_replay.dir/rule:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_replay/CMakeFiles/rpc_replay.dir/rule
+.PHONY : tools/rpc_replay/CMakeFiles/rpc_replay.dir/rule
+
+# Convenience name for target.
+rpc_replay: tools/rpc_replay/CMakeFiles/rpc_replay.dir/rule
+
+.PHONY : rpc_replay
+
+# fast build rule for target.
+rpc_replay/fast:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_replay/CMakeFiles/rpc_replay.dir/build.make tools/rpc_replay/CMakeFiles/rpc_replay.dir/build
+.PHONY : rpc_replay/fast
+
+info_thread.o: info_thread.cpp.o
+
+.PHONY : info_thread.o
+
+# target to build an object file
+info_thread.cpp.o:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_replay/CMakeFiles/rpc_replay.dir/build.make tools/rpc_replay/CMakeFiles/rpc_replay.dir/info_thread.cpp.o
+.PHONY : info_thread.cpp.o
+
+info_thread.i: info_thread.cpp.i
+
+.PHONY : info_thread.i
+
+# target to preprocess a source file
+info_thread.cpp.i:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_replay/CMakeFiles/rpc_replay.dir/build.make tools/rpc_replay/CMakeFiles/rpc_replay.dir/info_thread.cpp.i
+.PHONY : info_thread.cpp.i
+
+info_thread.s: info_thread.cpp.s
+
+.PHONY : info_thread.s
+
+# target to generate assembly for a file
+info_thread.cpp.s:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_replay/CMakeFiles/rpc_replay.dir/build.make tools/rpc_replay/CMakeFiles/rpc_replay.dir/info_thread.cpp.s
+.PHONY : info_thread.cpp.s
+
+rpc_replay.o: rpc_replay.cpp.o
+
+.PHONY : rpc_replay.o
+
+# target to build an object file
+rpc_replay.cpp.o:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_replay/CMakeFiles/rpc_replay.dir/build.make tools/rpc_replay/CMakeFiles/rpc_replay.dir/rpc_replay.cpp.o
+.PHONY : rpc_replay.cpp.o
+
+rpc_replay.i: rpc_replay.cpp.i
+
+.PHONY : rpc_replay.i
+
+# target to preprocess a source file
+rpc_replay.cpp.i:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_replay/CMakeFiles/rpc_replay.dir/build.make tools/rpc_replay/CMakeFiles/rpc_replay.dir/rpc_replay.cpp.i
+.PHONY : rpc_replay.cpp.i
+
+rpc_replay.s: rpc_replay.cpp.s
+
+.PHONY : rpc_replay.s
+
+# target to generate assembly for a file
+rpc_replay.cpp.s:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_replay/CMakeFiles/rpc_replay.dir/build.make tools/rpc_replay/CMakeFiles/rpc_replay.dir/rpc_replay.cpp.s
+.PHONY : rpc_replay.cpp.s
+
+# Help Target
+help:
+	@echo "The following are some of the valid targets for this Makefile:"
+	@echo "... all (the default if no target is provided)"
+	@echo "... clean"
+	@echo "... depend"
+	@echo "... edit_cache"
+	@echo "... install"
+	@echo "... install/local"
+	@echo "... install/strip"
+	@echo "... list_install_components"
+	@echo "... package"
+	@echo "... package_source"
+	@echo "... rebuild_cache"
+	@echo "... rpc_replay"
+	@echo "... info_thread.o"
+	@echo "... info_thread.i"
+	@echo "... info_thread.s"
+	@echo "... rpc_replay.o"
+	@echo "... rpc_replay.i"
+	@echo "... rpc_replay.s"
+.PHONY : help
+
+
+
+#=============================================================================
+# Special targets to cleanup operation of make.
+
+# Special rule to run CMake to check the build system integrity.
+# No rule that depends on this can have commands that come from listfiles
+# because they might be regenerated.
+cmake_check_build_system:
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
+.PHONY : cmake_check_build_system
+
diff --git a/tools/rpc_replay/info_thread.cpp b/tools/rpc_replay/info_thread.cpp
index d20d70e..51078bf 100644
--- a/tools/rpc_replay/info_thread.cpp
+++ b/tools/rpc_replay/info_thread.cpp
@@ -16,6 +16,7 @@
 // under the License.
 
 #include "info_thread.h"
+#include "butil/logging.h"
 
 namespace brpc {
 
diff --git a/tools/rpc_view/Makefile b/tools/rpc_view/Makefile
index 7c555f3..82cbddd 100644
--- a/tools/rpc_view/Makefile
+++ b/tools/rpc_view/Makefile
@@ -1,61 +1,304 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#   http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-BRPC_PATH = ../../
-include $(BRPC_PATH)/config.mk
-# Notes on the flags:
-# 1. Added -fno-omit-frame-pointer: perf/tcmalloc-profiler use frame pointers by default
-# 2. Added -D__const__= : Avoid over-optimizations of TLS variables by GCC>=4.8
-CXXFLAGS = $(CPPFLAGS) -std=c++0x -DNDEBUG -O2 -D__const__= -pipe -W -Wall -Wno-unused-parameter -fPIC -fno-omit-frame-pointer
-HDRPATHS = -I$(BRPC_PATH)/output/include $(addprefix -I, $(HDRS))
-LIBPATHS = -L$(BRPC_PATH)/output/lib $(addprefix -L, $(LIBS))
-STATIC_LINKINGS += $(BRPC_PATH)/output/lib/libbrpc.a
-
-CLIENT_SOURCES = rpc_view.cpp
-PROTOS = $(wildcard *.proto)
-
-PROTO_OBJS = $(PROTOS:.proto=.pb.o)
-PROTO_GENS = $(PROTOS:.proto=.pb.h) $(PROTOS:.proto=.pb.cc)
-CLIENT_OBJS = $(addsuffix .o, $(basename $(CLIENT_SOURCES))) 
-
-.PHONY:all
-all: rpc_view
-
-.PHONY:clean
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.17
+
+# Default target executed when no arguments are given to make.
+default_target: all
+
+.PHONY : default_target
+
+# Allow only one "make -f Makefile2" at a time, but pass parallelism.
+.NOTPARALLEL:
+
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Disable VCS-based implicit rules.
+% : %,v
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%,v
+
+
+# Disable VCS-based implicit rules.
+% : SCCS/s.%
+
+
+# Disable VCS-based implicit rules.
+% : s.%
+
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Command-line flag to silence nested $(MAKE).
+$(VERBOSE)MAKESILENT = -s
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /usr/bin/cmake3
+
+# The command to remove a file.
+RM = /usr/bin/cmake3 -E rm -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /home/fanyu/Downloads/incubator-brpc
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /home/fanyu/Downloads/incubator-brpc
+
+#=============================================================================
+# Targets provided globally by CMake.
+
+# Special rule for the target install/strip
+install/strip: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip
+
+# Special rule for the target install/strip
+install/strip/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip/fast
+
+# Special rule for the target install/local
+install/local: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local
+
+# Special rule for the target install/local
+install/local/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local/fast
+
+# Special rule for the target install
+install: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install
+
+# Special rule for the target install
+install/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install/fast
+
+# Special rule for the target list_install_components
+list_install_components:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Available install components are: \"Unspecified\""
+.PHONY : list_install_components
+
+# Special rule for the target list_install_components
+list_install_components/fast: list_install_components
+
+.PHONY : list_install_components/fast
+
+# Special rule for the target rebuild_cache
+rebuild_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
+	/usr/bin/cmake3 --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : rebuild_cache
+
+# Special rule for the target rebuild_cache
+rebuild_cache/fast: rebuild_cache
+
+.PHONY : rebuild_cache/fast
+
+# Special rule for the target edit_cache
+edit_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake cache editor..."
+	/usr/bin/ccmake3 -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : edit_cache
+
+# Special rule for the target edit_cache
+edit_cache/fast: edit_cache
+
+.PHONY : edit_cache/fast
+
+# Special rule for the target package_source
+package_source:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool for source..."
+	cd /home/fanyu/Downloads/incubator-brpc && /usr/bin/cpack3 --config ./CPackSourceConfig.cmake /home/fanyu/Downloads/incubator-brpc/CPackSourceConfig.cmake
+.PHONY : package_source
+
+# Special rule for the target package_source
+package_source/fast: package_source
+
+.PHONY : package_source/fast
+
+# Special rule for the target package
+package: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool..."
+	cd /home/fanyu/Downloads/incubator-brpc && /usr/bin/cpack3 --config ./CPackConfig.cmake
+.PHONY : package
+
+# Special rule for the target package
+package/fast: package
+
+.PHONY : package/fast
+
+# The main all target
+all: cmake_check_build_system
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles /home/fanyu/Downloads/incubator-brpc/tools/rpc_view/CMakeFiles/progress.marks
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_view/all
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles 0
+.PHONY : all
+
+# The main clean target
 clean:
-	@echo "Cleaning"
-	@rm -rf rpc_view $(PROTO_GENS) $(PROTO_OBJS) $(CLIENT_OBJS)
-
-rpc_view:$(PROTO_OBJS) $(CLIENT_OBJS)
-	@echo "Linking $@"
-ifeq ($(SYSTEM),Linux)
-	@$(CXX) $(LIBPATHS) -Xlinker "-(" $^ -Wl,-Bstatic $(STATIC_LINKINGS) -Wl,-Bdynamic -Xlinker "-)" $(DYNAMIC_LINKINGS) -o $@
-else ifeq ($(SYSTEM),Darwin)
-	@$(CXX) $(LIBPATHS) $^ $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS) -o $@
-endif
-
-%.pb.cc %.pb.h:%.proto
-	@echo "Generating $@"
-	@$(PROTOC) --cpp_out=. --proto_path=. $(PROTOC_EXTRA_ARGS) $<
-
-%.o:%.cpp
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
-
-%.o:%.cc
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_view/clean
+.PHONY : clean
+
+# The main clean target
+clean/fast: clean
+
+.PHONY : clean/fast
+
+# Prepare targets for installation.
+preinstall: all
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_view/preinstall
+.PHONY : preinstall
+
+# Prepare targets for installation.
+preinstall/fast:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_view/preinstall
+.PHONY : preinstall/fast
+
+# clear depends
+depend:
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
+.PHONY : depend
+
+# Convenience name for target.
+tools/rpc_view/CMakeFiles/rpc_view.dir/rule:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/rpc_view/CMakeFiles/rpc_view.dir/rule
+.PHONY : tools/rpc_view/CMakeFiles/rpc_view.dir/rule
+
+# Convenience name for target.
+rpc_view: tools/rpc_view/CMakeFiles/rpc_view.dir/rule
+
+.PHONY : rpc_view
+
+# fast build rule for target.
+rpc_view/fast:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_view/CMakeFiles/rpc_view.dir/build.make tools/rpc_view/CMakeFiles/rpc_view.dir/build
+.PHONY : rpc_view/fast
+
+rpc_view.o: rpc_view.cpp.o
+
+.PHONY : rpc_view.o
+
+# target to build an object file
+rpc_view.cpp.o:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_view/CMakeFiles/rpc_view.dir/build.make tools/rpc_view/CMakeFiles/rpc_view.dir/rpc_view.cpp.o
+.PHONY : rpc_view.cpp.o
+
+rpc_view.i: rpc_view.cpp.i
+
+.PHONY : rpc_view.i
+
+# target to preprocess a source file
+rpc_view.cpp.i:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_view/CMakeFiles/rpc_view.dir/build.make tools/rpc_view/CMakeFiles/rpc_view.dir/rpc_view.cpp.i
+.PHONY : rpc_view.cpp.i
+
+rpc_view.s: rpc_view.cpp.s
+
+.PHONY : rpc_view.s
+
+# target to generate assembly for a file
+rpc_view.cpp.s:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_view/CMakeFiles/rpc_view.dir/build.make tools/rpc_view/CMakeFiles/rpc_view.dir/rpc_view.cpp.s
+.PHONY : rpc_view.cpp.s
+
+view.pb.o: view.pb.cc.o
+
+.PHONY : view.pb.o
+
+# target to build an object file
+view.pb.cc.o:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_view/CMakeFiles/rpc_view.dir/build.make tools/rpc_view/CMakeFiles/rpc_view.dir/view.pb.cc.o
+.PHONY : view.pb.cc.o
+
+view.pb.i: view.pb.cc.i
+
+.PHONY : view.pb.i
+
+# target to preprocess a source file
+view.pb.cc.i:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_view/CMakeFiles/rpc_view.dir/build.make tools/rpc_view/CMakeFiles/rpc_view.dir/view.pb.cc.i
+.PHONY : view.pb.cc.i
+
+view.pb.s: view.pb.cc.s
+
+.PHONY : view.pb.s
+
+# target to generate assembly for a file
+view.pb.cc.s:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/rpc_view/CMakeFiles/rpc_view.dir/build.make tools/rpc_view/CMakeFiles/rpc_view.dir/view.pb.cc.s
+.PHONY : view.pb.cc.s
+
+# Help Target
+help:
+	@echo "The following are some of the valid targets for this Makefile:"
+	@echo "... all (the default if no target is provided)"
+	@echo "... clean"
+	@echo "... depend"
+	@echo "... edit_cache"
+	@echo "... install"
+	@echo "... install/local"
+	@echo "... install/strip"
+	@echo "... list_install_components"
+	@echo "... package"
+	@echo "... package_source"
+	@echo "... rebuild_cache"
+	@echo "... rpc_view"
+	@echo "... rpc_view.o"
+	@echo "... rpc_view.i"
+	@echo "... rpc_view.s"
+	@echo "... view.pb.o"
+	@echo "... view.pb.i"
+	@echo "... view.pb.s"
+.PHONY : help
+
+
+
+#=============================================================================
+# Special targets to cleanup operation of make.
+
+# Special rule to run CMake to check the build system integrity.
+# No rule that depends on this can have commands that come from listfiles
+# because they might be regenerated.
+cmake_check_build_system:
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
+.PHONY : cmake_check_build_system
+
diff --git a/tools/trackme_server/Makefile b/tools/trackme_server/Makefile
index e3ca235..7d1f8c5 100644
--- a/tools/trackme_server/Makefile
+++ b/tools/trackme_server/Makefile
@@ -1,50 +1,274 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#   http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-BRPC_PATH = ../../
-include $(BRPC_PATH)/config.mk
-CXXFLAGS = $(CPPFLAGS) -std=c++0x -DNDEBUG -O2 -D__const__= -pipe -W -Wall -fPIC -fno-omit-frame-pointer
-HDRPATHS = -I$(BRPC_PATH)/output/include $(addprefix -I, $(HDRS))
-LIBPATHS = -L$(BRPC_PATH)/output/lib $(addprefix -L, $(LIBS))
-STATIC_LINKINGS += $(BRPC_PATH)/output/lib/libbrpc.a
-
-SOURCES = $(wildcard *.cpp)
-OBJS = $(addsuffix .o, $(basename $(SOURCES))) 
-
-.PHONY:all
-all: trackme_server
-
-.PHONY:clean
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.17
+
+# Default target executed when no arguments are given to make.
+default_target: all
+
+.PHONY : default_target
+
+# Allow only one "make -f Makefile2" at a time, but pass parallelism.
+.NOTPARALLEL:
+
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Disable VCS-based implicit rules.
+% : %,v
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%
+
+
+# Disable VCS-based implicit rules.
+% : RCS/%,v
+
+
+# Disable VCS-based implicit rules.
+% : SCCS/s.%
+
+
+# Disable VCS-based implicit rules.
+% : s.%
+
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Command-line flag to silence nested $(MAKE).
+$(VERBOSE)MAKESILENT = -s
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /usr/bin/cmake3
+
+# The command to remove a file.
+RM = /usr/bin/cmake3 -E rm -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /home/fanyu/Downloads/incubator-brpc
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /home/fanyu/Downloads/incubator-brpc
+
+#=============================================================================
+# Targets provided globally by CMake.
+
+# Special rule for the target install
+install: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install
+
+# Special rule for the target install
+install/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
+	/usr/bin/cmake3 -P cmake_install.cmake
+.PHONY : install/fast
+
+# Special rule for the target list_install_components
+list_install_components:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Available install components are: \"Unspecified\""
+.PHONY : list_install_components
+
+# Special rule for the target list_install_components
+list_install_components/fast: list_install_components
+
+.PHONY : list_install_components/fast
+
+# Special rule for the target rebuild_cache
+rebuild_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
+	/usr/bin/cmake3 --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : rebuild_cache
+
+# Special rule for the target rebuild_cache
+rebuild_cache/fast: rebuild_cache
+
+.PHONY : rebuild_cache/fast
+
+# Special rule for the target edit_cache
+edit_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake cache editor..."
+	/usr/bin/ccmake3 -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : edit_cache
+
+# Special rule for the target edit_cache
+edit_cache/fast: edit_cache
+
+.PHONY : edit_cache/fast
+
+# Special rule for the target package_source
+package_source:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool for source..."
+	cd /home/fanyu/Downloads/incubator-brpc && /usr/bin/cpack3 --config ./CPackSourceConfig.cmake /home/fanyu/Downloads/incubator-brpc/CPackSourceConfig.cmake
+.PHONY : package_source
+
+# Special rule for the target package_source
+package_source/fast: package_source
+
+.PHONY : package_source/fast
+
+# Special rule for the target package
+package: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool..."
+	cd /home/fanyu/Downloads/incubator-brpc && /usr/bin/cpack3 --config ./CPackConfig.cmake
+.PHONY : package
+
+# Special rule for the target package
+package/fast: package
+
+.PHONY : package/fast
+
+# Special rule for the target install/strip
+install/strip: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip
+
+# Special rule for the target install/strip
+install/strip/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
+.PHONY : install/strip/fast
+
+# Special rule for the target install/local
+install/local: preinstall
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local
+
+# Special rule for the target install/local
+install/local/fast: preinstall/fast
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
+	/usr/bin/cmake3 -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
+.PHONY : install/local/fast
+
+# The main all target
+all: cmake_check_build_system
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles /home/fanyu/Downloads/incubator-brpc/tools/trackme_server/CMakeFiles/progress.marks
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/trackme_server/all
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/fanyu/Downloads/incubator-brpc/CMakeFiles 0
+.PHONY : all
+
+# The main clean target
 clean:
-	@echo "Cleaning"
-	@rm -rf trackme_server $(OBJS)
-
-trackme_server:$(OBJS)
-	@echo "Linking $@"
-ifeq ($(SYSTEM),Linux)
-	@$(CXX) $(LIBPATHS) -Xlinker "-(" $^ -Wl,-Bstatic $(STATIC_LINKINGS) -Wl,-Bdynamic -Xlinker "-)" $(DYNAMIC_LINKINGS) -o $@
-else ifeq ($(SYSTEM),Darwin)
-	@$(CXX) $(LIBPATHS) $^ $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS) -o $@
-endif
-
-%.o:%.cpp
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
-
-%.o:%.cc
-	@echo "Compiling $@"
-	@$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/trackme_server/clean
+.PHONY : clean
+
+# The main clean target
+clean/fast: clean
+
+.PHONY : clean/fast
+
+# Prepare targets for installation.
+preinstall: all
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/trackme_server/preinstall
+.PHONY : preinstall
+
+# Prepare targets for installation.
+preinstall/fast:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/trackme_server/preinstall
+.PHONY : preinstall/fast
+
+# clear depends
+depend:
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
+.PHONY : depend
+
+# Convenience name for target.
+tools/trackme_server/CMakeFiles/trackme_server.dir/rule:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 tools/trackme_server/CMakeFiles/trackme_server.dir/rule
+.PHONY : tools/trackme_server/CMakeFiles/trackme_server.dir/rule
+
+# Convenience name for target.
+trackme_server: tools/trackme_server/CMakeFiles/trackme_server.dir/rule
+
+.PHONY : trackme_server
+
+# fast build rule for target.
+trackme_server/fast:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/trackme_server/CMakeFiles/trackme_server.dir/build.make tools/trackme_server/CMakeFiles/trackme_server.dir/build
+.PHONY : trackme_server/fast
+
+trackme_server.o: trackme_server.cpp.o
+
+.PHONY : trackme_server.o
+
+# target to build an object file
+trackme_server.cpp.o:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/trackme_server/CMakeFiles/trackme_server.dir/build.make tools/trackme_server/CMakeFiles/trackme_server.dir/trackme_server.cpp.o
+.PHONY : trackme_server.cpp.o
+
+trackme_server.i: trackme_server.cpp.i
+
+.PHONY : trackme_server.i
+
+# target to preprocess a source file
+trackme_server.cpp.i:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/trackme_server/CMakeFiles/trackme_server.dir/build.make tools/trackme_server/CMakeFiles/trackme_server.dir/trackme_server.cpp.i
+.PHONY : trackme_server.cpp.i
+
+trackme_server.s: trackme_server.cpp.s
+
+.PHONY : trackme_server.s
+
+# target to generate assembly for a file
+trackme_server.cpp.s:
+	cd /home/fanyu/Downloads/incubator-brpc && $(MAKE) $(MAKESILENT) -f tools/trackme_server/CMakeFiles/trackme_server.dir/build.make tools/trackme_server/CMakeFiles/trackme_server.dir/trackme_server.cpp.s
+.PHONY : trackme_server.cpp.s
+
+# Help Target
+help:
+	@echo "The following are some of the valid targets for this Makefile:"
+	@echo "... all (the default if no target is provided)"
+	@echo "... clean"
+	@echo "... depend"
+	@echo "... edit_cache"
+	@echo "... install"
+	@echo "... install/local"
+	@echo "... install/strip"
+	@echo "... list_install_components"
+	@echo "... package"
+	@echo "... package_source"
+	@echo "... rebuild_cache"
+	@echo "... trackme_server"
+	@echo "... trackme_server.o"
+	@echo "... trackme_server.i"
+	@echo "... trackme_server.s"
+.PHONY : help
+
+
+
+#=============================================================================
+# Special targets to cleanup operation of make.
+
+# Special rule to run CMake to check the build system integrity.
+# No rule that depends on this can have commands that come from listfiles
+# because they might be regenerated.
+cmake_check_build_system:
+	cd /home/fanyu/Downloads/incubator-brpc && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
+.PHONY : cmake_check_build_system
+
